{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":"<p>Welcome to the Data Management System documentation! Here, you will find all the essential information about the project, from an overview to technical and configuration details.</p> <p>The DMS Dashboard is a Next.js web application built with TypeScript, React, and Tailwind CSS, utilizing a MongoDB database via Mongoose. It provides a user interface for tracking and analyzing waste management data, including material stock, sales, worker collections, and price trends. Key features include user authentication, data visualization through charts, and various API endpoints for data retrieval and management.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"Section Subsection Link Home Home Project Getting Started Getting Started Development Process Technical Documentation API Documentation API Documentation System Architecture System Architecture Database Schema Database Schema Front-End Front-End Setup &amp; Configuration MkDocs MkDocs Configuration MkDocs Configuration MkDocs Setup MkDocs Setup Environment Setup Python Virtual Environment Python Virtual Environment Publishing Guide Publishing Guide README README References References"},{"location":"#revision-history","title":"Revision History","text":"Date Version Changes Authors 2025-03-28 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes 2025-06-27 1.0 Document creation Ant\u00f4nio Guimar\u00e3es and Lucas Antunes"},{"location":"references/","title":"References","text":"<p>\u2190 Back to Main Page</p> <ol> <li>Leffingwell, D., Widrig, D., Managing Software Requirements: A Use Case Approach, 2nd Edition, Addison-Wesley, 2003.</li> <li>Cockburn, A., Escrevendo Casos de Uso Eficazes: Um Guia Pr\u00e1tico para Desenvolvedores de Software, 1st Edition, Bookman Companhia, 2005.</li> <li>Ambler, S., Agile Modeling, Wiley, 2002.</li> <li>Handbook IREB CPRE Foundation Level, Version 1.1.0, September 2022.</li> <li>SOMMERVILLE, Ian., Engenharia de Software, 9th Edition, Pearson Prentice Hall, 2011.</li> <li>BECK, K.; ANDRES, C., Extreme Programming Explained: Embrace Change, Addison-Wesley Professional, 2000.</li> </ol>"},{"location":"references/#revision-history","title":"Revision History","text":"Date Version Changes Authors 2025-03-28 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to Main Page</p>"},{"location":"project/stakeholders/","title":"Stakeholders","text":"<p>\u2190 Back to Main Page</p>"},{"location":"project/stakeholders/#overview","title":"Overview","text":"<p>Este documento fornece uma vis\u00e3o geral dos stakeholders envolvidos no projeto, seus pap\u00e9is e como contribuem para o sucesso da iniciativa. Compreender os interesses, expectativas e o envolvimento de cada stakeholder \u00e9 crucial para garantir uma comunica\u00e7\u00e3o eficaz e o alinhamento durante todo o ciclo de vida do projeto.</p>"},{"location":"project/stakeholders/#stakeholder-identification","title":"Stakeholder Identification","text":"Stakeholder Role Responsibilities Expectations Project Sponsor O Project Sponsor \u00e9 o principal tomador de decis\u00f5es e autoridade de financiamento do projeto. - Aprovar or\u00e7amento e escopo.  - Tomar decis\u00f5es-chave.  - Resolver riscos e problemas de alto n\u00edvel. - Entrega pontual do projeto dentro do or\u00e7amento.  - Alinhamento com os objetivos estrat\u00e9gicos.  - Comunica\u00e7\u00e3o clara sobre progresso e riscos. Project Manager O Project Manager supervisiona as opera\u00e7\u00f5es di\u00e1rias do projeto, gerencia recursos e prazos. - Planejar, executar e monitorar o progresso.  - Coordenar as atividades e recursos.  - Gerenciar riscos e problemas. - Conclus\u00e3o bem-sucedida do projeto dentro dos par\u00e2metros.  - Atualiza\u00e7\u00f5es regulares para os stakeholders.  - Gest\u00e3o eficaz da equipe. Development Team A Development Team desenvolve, testa e implementa a solu\u00e7\u00e3o. - Desenvolver software conforme especifica\u00e7\u00f5es.  - Realizar testes.  - Participar de reuni\u00f5es de projeto. - C\u00f3digo de alta qualidade.  - Entrega pontual das funcionalidades.  - Participa\u00e7\u00e3o ativa nas discuss\u00f5es e solu\u00e7\u00f5es. Product Owner O Product Owner define as funcionalidades do produto e prioriza os requisitos. - Definir e priorizar funcionalidades.  - Garantir que o produto atenda \u00e0s necessidades dos usu\u00e1rios.  - Comunicar-se entre os stakeholders e a equipe de desenvolvimento. - Roteiro claro e priorizado.  - Comunica\u00e7\u00e3o regular com a equipe.  - Satisfa\u00e7\u00e3o do cliente e demanda de mercado atendida. End Users Os End Users s\u00e3o os usu\u00e1rios finais que interagem diretamente com o produto. - Fornecer feedback sobre funcionalidades e usabilidade.  - Participar de testes e feedback. - Produto intuitivo e f\u00e1cil de usar.  - Funcionalidades que atendem \u00e0s suas necessidades.  - Atualiza\u00e7\u00f5es regulares sobre o progresso do projeto. Marketing Team O Marketing Team promove o produto e cria a estrat\u00e9gia de lan\u00e7amento. - Desenvolver e executar campanhas de marketing.  - Realizar pesquisa de mercado.  - Coordenar o lan\u00e7amento e o engajamento dos usu\u00e1rios. - Alinhamento com as demandas do mercado.  - Apoio ao crescimento do produto.  - Comunica\u00e7\u00e3o clara sobre caracter\u00edsticas e prazos. Customer Support Team O Customer Support Team resolve d\u00favidas e problemas ap\u00f3s o lan\u00e7amento do produto. - Oferecer suporte cont\u00ednuo aos usu\u00e1rios.  - Documentar problemas frequentes.  - Relatar feedback para melhorias. - Resolu\u00e7\u00e3o eficiente de problemas.  - Alta satisfa\u00e7\u00e3o p\u00f3s-lan\u00e7amento.  - Comunica\u00e7\u00e3o clara com a equipe de produto."},{"location":"project/stakeholders/#stakeholder-engagement-strategy","title":"Stakeholder Engagement Strategy","text":"<p>A gest\u00e3o eficaz dos stakeholders \u00e9 vital para o sucesso do projeto. As seguintes estrat\u00e9gias ser\u00e3o adotadas para garantir o alinhamento com todos os stakeholders:</p> Strategy Description Comunica\u00e7\u00e3o Regular Manter comunica\u00e7\u00e3o consistente por meio de relat\u00f3rios de status semanais ou quinzenais, reuni\u00f5es e atualiza\u00e7\u00f5es. Reuni\u00f5es com Stakeholders Organizar reuni\u00f5es regulares para coletar feedback, revisar o progresso e abordar qualquer preocupa\u00e7\u00e3o. Canais de Feedback Estabelecer canais formais e informais de feedback para coletar informa\u00e7\u00f5es dos stakeholders, especialmente dos usu\u00e1rios finais e do Product Owner. Resolu\u00e7\u00e3o de Conflitos Abordar proativamente quaisquer conflitos ou desalinhamentos entre stakeholders, facilitando discuss\u00f5es transparentes e encontrando um terreno comum."},{"location":"project/stakeholders/#revision-history","title":"Revision History","text":"Date Version Changes Authors 2025-03-28 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to Main Page</p>"},{"location":"project/started/","title":"Getting Started","text":"<p>\u2190 Back to Main Page</p> <p>This section explains how to set up and run the project locally.</p>"},{"location":"project/started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js (version recommended by Next.js, e.g., 18.x or later)</li> <li>npm, yarn, pnpm, or bun (package manager)</li> <li>Access to a MongoDB instance (local or cloud-hosted)</li> <li>Git (for cloning the repository)</li> </ul>"},{"location":"project/started/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>If you haven't already, clone the project repository to your local machine:</p> <pre><code>git clone &lt;repository_url&gt; # Replace &lt;repository_url&gt; with the actual URL\ncd &lt;project_directory&gt;   # Replace &lt;project_directory&gt; with the folder name\n</code></pre>"},{"location":"project/started/#2-install-dependencies","title":"2. Install Dependencies","text":"<p>Install the project dependencies using your preferred package manager:</p> <pre><code>npm install\n# or\nyarn install\n# or\npnpm install\n# or\nbun install\n</code></pre>"},{"location":"project/started/#3-configure-environment-variables","title":"3. Configure Environment Variables","text":"<p>The application requires a MongoDB connection URI and a JWT secret for authentication. Create a <code>.env.local</code> file in the root of the project and add the following:</p> <pre><code>MONGODB_URI=\"your_mongodb_connection_string\"\nMONGODB_DB=\"your_database_name\" # Optional: defaults to 'DMS' if not set. Used by src/models/index.ts.\nJWT_SECRET=\"your_strong_jwt_secret_key\" # Crucial for security. Used by /api/auth/login.\n</code></pre> <ul> <li>Replace <code>your_mongodb_connection_string</code> with the actual URI for your MongoDB database (e.g., <code>mongodb://localhost:27017/dms_dashboard</code> or a cloud provider string).</li> <li>Replace <code>your_database_name</code> with the name of your database if it's different from <code>DMS</code>.</li> <li>Replace <code>your_strong_jwt_secret_key</code> with a long, random, and secret string for signing JSON Web Tokens (JWTs). The default value 'dms-dashboard-secret-key' found in the code is insecure and must not be used in production.</li> </ul> <p>Note: - <code>src/lib/mongodb.ts</code> primarily uses <code>MONGODB_URI</code> to establish a database connection. - <code>src/models/index.ts</code> uses <code>MONGODB_DB</code> to specify the database name. - The login API route (<code>src/app/api/auth/login/route.ts</code>) uses <code>JWT_SECRET</code> for token generation.</p>"},{"location":"project/started/#4-database-setup-if-applicable","title":"4. Database Setup (If applicable)","text":"<ul> <li>Ensure your MongoDB instance is running and accessible with the credentials provided in <code>MONGODB_URI</code>.</li> <li>The application interacts with several collections (e.g., <code>users</code>, <code>materials</code>, <code>measurements</code>, <code>sales</code>). If starting with an empty database:<ul> <li>The application may attempt to create collections as new data is added if Mongoose models are used for insertion.</li> <li>However, for full functionality and to avoid relying on sample data fallbacks in API routes, you might need to manually populate essential data for collections such as <code>users</code> and <code>materials</code>.</li> <li>Regarding Database Seeding: Code comments in some parts of the application mention a Python script named <code>repopulate_db.py</code> for database seeding. However, this script is not provided in the current project repository.</li> <li>Therefore, developers starting with an empty database should:<ul> <li>Be prepared to create initial user accounts (e.g., an admin user). The <code>generatepass.js</code> script can be used to create password hashes for manual insertion into the <code>users</code> collection.</li> <li>Add some initial materials to the <code>materials</code> collection.</li> <li>Other collections like <code>measurements</code> and <code>sales</code> will be populated as data is generated through application usage.</li> </ul> </li> </ul> </li> <li>Without initial or correctly structured data (especially for <code>users</code> and <code>materials</code>), some dashboard features might have limited functionality or might default to sample data as coded in some API endpoints.</li> </ul>"},{"location":"project/started/#5-run-the-development-server","title":"5. Run the Development Server","text":"<p>Start the Next.js development server:</p> <pre><code>npm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n</code></pre> <p>This will typically start the application on <code>http://localhost:3000</code>. Open this URL in your browser. The page auto-updates as you edit files.</p>"},{"location":"project/started/#6-building-for-production","title":"6. Building for Production","text":"<p>To create an optimized production build:</p> <pre><code>npm run build\n# or\nyarn build\n# or\npnpm build\n# or\nbun build\n</code></pre> <p>After building, you can start the production server:</p> <pre><code>npm run start\n# or\nyarn start\n# or\npnpm start\n# or\nbun start\n</code></pre> <p>\u2190 Back to Main Page</p>"},{"location":"project/development/lifecycle/","title":"Project Life Cycle","text":"<p>\u2190 Back to Main Page</p> <p>This document describes the  Project Life Cycle , from conception to final delivery. Each phase is crucial for ensuring a structured development process, minimizing risks, and maximizing product quality.</p>"},{"location":"project/development/lifecycle/#project-phases","title":"Project Phases","text":"Phase Objective Key Activities Elicitation and Discovery Identify the needs and expectations of stakeholders. Collect requirements through interviews and market analysis. Identify challenges and opportunities. Define users and their key problems. Analysis and Consensus Refine and validate the collected requirements. Prioritize requirements based on feasibility and impact. Validate with stakeholders. Define success metrics. Declaration Formalize requirements and establish a clear scope. Official documentation of functional and non-functional requirements. Define acceptance criteria. Create the initial backlog and product roadmap. Representation Create models and prototypes to visualize the solution. Develop low-fidelity wireframes and prototypes. Model user flows and processes. Continuous feedback with stakeholders for adjustments. Verification and Validation Ensure that the requirements are correctly implemented. Functionality, usability, and performance testing. Review compliance with requirements and acceptance criteria. Adjustments based on test feedback. Organization and Update Keep the project documentation organized and updated. Record changes and backlog evolution. Plan new iterations and refine requirements. Monitor system adoption and performance."},{"location":"project/development/lifecycle/#revision-history","title":"Revision History","text":"Date Version Changes Authors 2025-03-28 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to Main Page</p>"},{"location":"project/development/tools/","title":"Tools &amp; Externals","text":"<p>\u2190 Back to Main Page</p>"},{"location":"project/development/tools/#tools-used","title":"Tools Used","text":"Tool Description Link Jira Project management platform that helps plan, track, and manage development tasks and sprints. Used to organize the backlog, control progress, and monitor epics and user stories. Jira GitHub Source code hosting and version control platform. Used for code versioning, developer collaboration, and CI/CD integration. GitHub MongoDB NoSQL database used for data storage and management. Chosen for its flexibility and scalability in managing large volumes of data. MongoDB Express.js Node.js framework used to build the system's RESTful APIs, simplifying routing and middleware handling. Express.js Vue.js JavaScript framework for building user interfaces and Single Page Applications (SPA). Used for front-end development of the system. Vue.js Postman Tool used to test APIs and endpoints, ensuring that requests and responses behave as expected. Postman Docker Containerization platform that simplifies the creation, development, and execution of applications in isolated environments, ensuring consistency across development and production environments. Docker Swagger Tool for documenting and testing RESTful APIs, allowing developers and stakeholders to easily visualize and interact with API endpoints. Swagger Nginx Web server and reverse proxy used for load distribution, traffic balancing, and static file hosting for the front-end of the system. Nginx Jenkins Continuous integration tool that automates the build, test, and deployment process of the system. Jenkins Redis In-memory database used for caching and performance optimization, ensuring fast responses and scalability. Redis New Relic Application performance monitoring tool that provides detailed metrics about system performance, identifying bottlenecks and areas for improvement. New Relic Trello Visual collaboration platform used for task management, tracking team progress, and organizing sprints and project activities. Trello Slack Team communication platform that facilitates instant messaging and topic organization by channels, with integration to other productivity tools. Slack Sentry Error and performance monitoring tool to detect and fix issues in real-time across applications. Sentry"},{"location":"project/development/tools/#revision-history","title":"Revision History","text":"Date Version Changes Authors 2025-03-28 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to Main Page</p>"},{"location":"project/development/technical/api/","title":"API Documentation","text":""},{"location":"project/development/technical/api/#api-documentation-content-and-user-management-system","title":"API Documentation: Content and User Management System","text":"<p>\u2190 Back to Main Page</p>"},{"location":"project/development/technical/api/#api-endpoints","title":"API Endpoints","text":"<p>This section details the available API endpoints, their functionalities, and expected request/response formats. All endpoints are located under <code>/api</code>.</p>"},{"location":"project/development/technical/api/#authentication","title":"Authentication","text":"<ul> <li><code>POST /api/auth/login</code></li> <li>Description: Authenticates a user based on CPF and password.</li> <li>Request Body:     <code>json     {       \"cpf\": \"user_cpf\",       \"password\": \"user_password\"     }</code></li> <li> <p>Response:</p> <ul> <li>Success (200): Sets an <code>auth_token</code> (JWT) cookie and returns user details.   <code>json   {     \"message\": \"Login realizado com sucesso\",     \"user\": {       \"id\": \"user_id\",       \"name\": \"User Name\",       \"full_name\": \"User Full Name\",       \"userType\": 0, // Or other user type integer       \"notFound\": false // True if user was not found in DB and a fallback/sample was used     }   }</code></li> <li>Error (400): If <code>cpf</code> or <code>password</code> are not provided.   <code>json   { \"message\": \"CPF e senha s\u00e3o obrigat\u00f3rios\" }</code></li> <li>Error (500): Server-side error during login.   <code>json   { \"message\": \"Erro no servidor\" }</code></li> </ul> </li> <li> <p><code>POST /api/auth/logout</code></p> </li> <li>Description: Logs out the current user by clearing the <code>auth_token</code> cookie.</li> <li>Response:<ul> <li>Success (200):   <code>json   { \"message\": \"Logout realizado com sucesso\" }</code></li> <li>Error (500): Server-side error during logout.   <code>json   { \"message\": \"Erro no servidor\" }</code></li> </ul> </li> </ul>"},{"location":"project/development/technical/api/#birthdays","title":"Birthdays","text":"<ul> <li><code>GET /api/birthdays</code></li> <li>Description: Fetches users (specifically workers, identified by <code>user_type: 1</code>) whose birthdays occur in the current month.</li> <li>Query Parameters: None.</li> <li>Response:<ul> <li>Success (200): An array of birthday objects. Returns sample data if no matching birthdays are found in the database for the current month.   <code>json   [     { \"name\": \"User Full Name\", \"date\": \"DD/MM\" },     // ... more users   ]</code>   Example Sample Data (if no DB entries for current month):   <code>json   [     { \"name\": \"Jo\u00e3o Silva\", \"date\": \"15/06\" },     // ...   ]</code></li> <li>Error (500): Server-side error.   <code>json   { \"error\": \"Failed to fetch birthdays data\", \"details\": \"Error message string\" }</code></li> </ul> </li> </ul>"},{"location":"project/development/technical/api/#cooperatives","title":"Cooperatives","text":"<ul> <li><code>GET /api/cooperatives</code></li> <li>Description: Fetches a list of cooperatives.</li> <li>Query Parameters: To be determined by code review.</li> <li>Response:<ul> <li>Success (200): Array of cooperative objects.</li> <li>Error Responses: (500) Server Error.</li> </ul> </li> <li> <p>Note: Methods (GET, POST) inferred from route file presence. Actual implementation details need code review.</p> </li> <li> <p><code>POST /api/cooperatives</code></p> </li> <li>Description: Creates a new cooperative.</li> <li>Request Body: Cooperative data. (To be determined by code review).</li> <li>Response:<ul> <li>Success (201): Cooperative object created.</li> <li>Error Responses: (400) Bad Request, (500) Server Error.</li> </ul> </li> <li>Note: Methods (GET, POST) inferred from route file presence. Actual implementation details need code review.</li> </ul>"},{"location":"project/development/technical/api/#debug-endpoints","title":"Debug Endpoints","text":"<p>These endpoints appear to be for development and debugging purposes.</p> <ul> <li><code>GET /api/debug/collections</code></li> <li>Description: Lists all collections in the connected MongoDB database and provides a sample document from each.</li> <li>Response (200):     <code>json     {       \"collections\": [\"collection_name_1\", \"collection_name_2\", \"...\"],       \"samples\": {         \"collection_name_1\": {           \"fields\": [\"field1\", \"field2\", \"...\"],           \"sample\": { \"field1\": \"value1\", \"...\" }         },         // ... more collections       }     }</code></li> <li> <p>Error (500): Server-side error.</p> </li> <li> <p><code>GET /api/debug/check-data</code></p> </li> <li>Description: Checks some data consistency or status in the database.</li> <li>Query Parameters: To be determined by code review.</li> <li>Response:<ul> <li>Success (200): Status message or data check results.</li> <li>Error Responses: (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review.</p> </li> <li> <p><code>POST /api/debug/create-test-user</code></p> </li> <li>Description: Creates a test user in the system.</li> <li>Request Body: Test user data (To be determined by code review).</li> <li>Response:<ul> <li>Success (201): Created test user object.</li> <li>Error Responses: (400) Bad Request, (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review.</p> </li> <li> <p><code>GET /api/debug/wastepickers</code></p> </li> <li>Description: Attempts to find a specific wastepicker (user) using various query methods (by <code>wastepicker_id</code>, CPF, ObjectId). It may also attempt to insert a test user if not found.</li> <li>Response (200): An object containing results of different find/insert attempts.     <code>json     {       \"byWastepickerId\": { /* user doc */ } // or null       \"byCpf\": { /* user doc */ } // or null       \"byObjectId\": { /* user doc */ } // or null       \"collections\": [\"users\", \"...\"], // list of collections       \"insertAttempt\": { /* MongoDB update result */ }       \"afterInsert\": { /* User document after upsert */ }     }</code></li> <li>Error (500): Server-side error.</li> </ul>"},{"location":"project/development/technical/api/#data-utilities","title":"Data Utilities","text":"<ul> <li><code>POST /api/recalculate-contributions</code></li> <li>Description: Triggers a recalculation of contributions or similar aggregate data.</li> <li>Request Body: Potentially parameters for recalculation (To be determined by code review).</li> <li>Response:<ul> <li>Success (200): Message confirming recalculation started or completed.</li> <li>Error Responses: (400) Bad Request, (500) Server Error.</li> </ul> </li> <li>Note: Actual implementation details need code review.</li> </ul>"},{"location":"project/development/technical/api/#earnings-comparison","title":"Earnings Comparison","text":"<ul> <li><code>GET /api/earnings-comparison</code></li> <li>Description: Fetches aggregated earnings data from the <code>sales</code> collection for comparison over different time periods.</li> <li>Query Parameters:<ul> <li><code>material_id</code> (optional <code>String</code>): ID of the material to filter earnings by.</li> <li><code>period_type</code> (optional <code>String</code>): <code>weekly</code>, <code>monthly</code> (default), or <code>yearly</code>. Defines the aggregation period.</li> </ul> </li> <li>Response:<ul> <li>Success (200): An array of earnings data points.   <code>json   [     { \"period\": \"Period Label\", \"earnings\": 1234.56 },     // ... more periods (typically 6 for monthly/weekly, variable for yearly)   ]</code>   Period Label format examples:<ul> <li>Weekly: \"DD/MM - DD/MM\"</li> <li>Monthly: \"jun\", \"jul\" (abbreviated month name)</li> <li>Yearly: \"YYYY\"</li> </ul> </li> <li>No Data (200): If no sales data is found for the criteria.   <code>json   {     \"noData\": true,     \"message\": \"N\u00e3o h\u00e1 vendas registradas para este material\" // or general message   }</code></li> <li>Error (500): Server-side error.   <code>json   {     \"noData\": true, // Often returns noData structure on error too     \"message\": \"Erro ao buscar dados de vendas. Por favor, tente novamente mais tarde.\"   }</code></li> </ul> </li> </ul>"},{"location":"project/development/technical/api/#materials","title":"Materials","text":"<ul> <li><code>GET /api/materials</code></li> <li>Description: Fetches a list of all materials from the <code>materials</code> collection.</li> <li>Query Parameters: None.</li> <li> <p>Response:</p> <ul> <li>Success (200): An array of material objects.   <code>json   [     {       \"_id\": \"material_object_id\", // MongoDB ObjectId       \"material_id\": \"material_id_value\", // Application-specific ID, or _id if material_id is missing       \"name\": \"Material Name\", // Preferred name, or derived from material.material       // ... other fields from the material document in the collection     },     // ... more materials   ]</code></li> <li>Error (404): If no materials are found in the database.   <code>json   { \"error\": \"No materials available\", \"details\": \"No materials were found in the database\" }</code></li> <li>Error (500): Server-side error.   <code>json   { \"error\": \"Failed to fetch materials\", \"details\": \"Error message string\" }</code></li> </ul> </li> <li> <p><code>POST /api/materials</code></p> </li> <li>Description: Creates a new material.</li> <li>Request Body: Material data (To be determined by code review).</li> <li>Response:<ul> <li>Success (201): Material object created.</li> <li>Error Responses: (400) Bad Request, (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review.</p> </li> <li> <p><code>GET /api/materials/{id}</code></p> </li> <li>Description: Fetches a specific material by its ID.</li> <li>Path Parameters:<ul> <li><code>id</code>: The ID of the material.</li> </ul> </li> <li>Query Parameters: None.</li> <li>Response:<ul> <li>Success (200): Material object.</li> <li>Error Responses: (404) Not Found, (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review.</p> </li> <li> <p><code>PUT /api/materials/{id}</code></p> </li> <li>Description: Updates a specific material by its ID.</li> <li>Path Parameters:<ul> <li><code>id</code>: The ID of the material to update.</li> </ul> </li> <li>Request Body: Updated material data (To be determined by code review).</li> <li>Response:<ul> <li>Success (200): Updated material object.</li> <li>Error Responses: (400) Bad Request, (404) Not Found, (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review.</p> </li> <li> <p><code>DELETE /api/materials/{id}</code></p> </li> <li>Description: Deletes a specific material by its ID.</li> <li>Path Parameters:<ul> <li><code>id</code>: The ID of the material to delete.</li> </ul> </li> <li>Response:<ul> <li>Success (200): Message confirming deletion.</li> <li>Error Responses: (404) Not Found, (500) Server Error.</li> </ul> </li> <li>Note: Actual implementation details need code review.</li> </ul>"},{"location":"project/development/technical/api/#price-fluctuation","title":"Price Fluctuation","text":"<ul> <li><code>GET /api/price-fluctuation</code></li> <li>Description: Fetches price fluctuation data for materials, sourced from the <code>sales</code> collection.</li> <li>Query Parameters:<ul> <li><code>material_id</code> (optional <code>String</code>): ID of the specific material to fetch price history for.</li> </ul> </li> <li>Response:<ul> <li>Success (200, with <code>material_id</code>): An array of the last 10 sales records for the specified material, sorted chronologically.   <code>json   [     {       \"date\": \"ISO_date_string\", // e.g., \"2023-06-15T00:00:00.000Z\"       \"material\": \"Material Name\",       \"price\": 12.34, // price/kg       \"dateLabel\": \"DD Mmm YY\", // e.g., \"15 Jun 23\"       \"timestamp\": 1678886400000 // Unix timestamp milliseconds     },     // ... up to 10 records   ]</code></li> <li>Success (200, without <code>material_id</code>): Data for the top 5 materials with the most recent sales. For each of these, the last 10 sales records are aggregated by date.   <code>json   {     \"materials\": [\"Material Name 1\", \"Material Name 2\", \"...\"], // Top 5 material names     \"priceData\": [       {         \"weekLabel\": \"DD Mmm YY\", // Unique date label across all sales         \"date\": \"ISO_date_string\",         \"materials\": {           \"Material Name 1\": 10.50, // Price if available for this date           \"Material Name 2\": 12.75,           // ... other materials might be null if no sale on this date         }       },       // ... more date points     ]   }</code></li> <li>No Data (200): If no relevant sales data is found for the criteria.   <code>json   {     \"noData\": true,     \"message\": \"N\u00e3o h\u00e1 hist\u00f3rico de pre\u00e7os para este material\" // or general message   }</code></li> <li>Error (Returns 200 with <code>noData:true</code>): If an error occurs during fetching, it often returns a 200 status with a <code>noData</code> structure.   <code>json   {     \"noData\": true,     \"message\": \"Erro ao buscar dados de pre\u00e7os\"   }</code></li> </ul> </li> </ul>"},{"location":"project/development/technical/api/#sales","title":"Sales","text":"<ul> <li><code>GET /api/sales</code></li> <li>Description: Fetches a list of sales records.</li> <li>Query Parameters: To be determined by code review (e.g., filters for material, date range).</li> <li>Response:<ul> <li>Success (200): Array of sales objects.</li> <li>Error Responses: (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review.</p> </li> <li> <p><code>POST /api/sales</code></p> </li> <li>Description: Creates a new sales record.</li> <li>Request Body: Sales data (To be determined by code review).</li> <li>Response:<ul> <li>Success (201): Sales object created.</li> <li>Error Responses: (400) Bad Request, (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review.</p> </li> <li> <p><code>GET /api/sales/{id}</code></p> </li> <li>Description: Fetches a specific sales record by its ID.</li> <li>Path Parameters:<ul> <li><code>id</code>: The ID of the sales record.</li> </ul> </li> <li>Query Parameters: None.</li> <li>Response:<ul> <li>Success (200): Sales object.</li> <li>Error Responses: (404) Not Found, (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review.</p> </li> <li> <p><code>PUT /api/sales/{id}</code></p> </li> <li>Description: Updates a specific sales record by its ID.</li> <li>Path Parameters:<ul> <li><code>id</code>: The ID of the sales record to update.</li> </ul> </li> <li>Request Body: Updated sales data (To be determined by code review).</li> <li>Response:<ul> <li>Success (200): Updated sales object.</li> <li>Error Responses: (400) Bad Request, (404) Not Found, (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review.</p> </li> <li> <p><code>DELETE /api/sales/{id}</code></p> </li> <li>Description: Deletes a specific sales record by its ID.</li> <li>Path Parameters:<ul> <li><code>id</code>: The ID of the sales record to delete.</li> </ul> </li> <li>Response:<ul> <li>Success (200): Message confirming deletion.</li> <li>Error Responses: (404) Not Found, (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review.</p> </li> <li> <p><code>GET /api/sales/buyers</code></p> </li> <li>Description: Fetches a list of unique buyers from sales records.</li> <li>Query Parameters: To be determined by code review.</li> <li>Response:<ul> <li>Success (200): Array of buyer names or objects.</li> <li>Error Responses: (500) Server Error.</li> </ul> </li> <li>Note: Actual implementation details need code review.</li> </ul>"},{"location":"project/development/technical/api/#stock","title":"Stock","text":"<ul> <li><code>GET /api/stock</code></li> <li>Description: Fetches current stock data. It aggregates weights from the <code>measurements</code> collection and subtracts sold quantities from the <code>sales</code> collection.</li> <li>Query Parameters:<ul> <li><code>material_id</code> (optional <code>String</code>): ID of the material to filter stock for.</li> </ul> </li> <li>Response:<ul> <li>Success (200): An object where keys are material names and values are their current stock weight in kg. Returns sample data if no stock data is found in the DB.   <code>json   {     \"Material Name 1\": 150.75,     \"Material Name 2\": 200.00,     // ... more materials   }</code></li> <li>No Data (200, for specific <code>material_id</code>): If <code>material_id</code> is provided but no stock is found for it.   <code>json   { \"noData\": true, \"message\": \"N\u00e3o h\u00e1 estoque deste material\" }</code></li> <li>Sample Data (if DB is empty or error occurs):   <code>json   {     \"Papel\u00e3o\": 950,     \"Papel Branco\": 850,     // ... more sample materials   }</code></li> <li>Error: In case of a server error, it often falls back to returning sample stock data with a 200 status.</li> </ul> </li> </ul>"},{"location":"project/development/technical/api/#user","title":"User","text":"<ul> <li><code>GET /api/user</code></li> <li>Description: Fetches details for a specific user.</li> <li>Query Parameters:<ul> <li><code>id</code> (required <code>String</code>): The MongoDB ObjectId or application-specific ID of the user to fetch.</li> </ul> </li> <li> <p>Response:</p> <ul> <li>Success (200): User object (sensitive fields like password hash are omitted).   <code>json   {     \"_id\": \"user_mongodb_object_id\",     \"full_name\": \"User Full Name\",     // ... other user fields   }</code></li> <li>Error (400): If <code>id</code> query parameter is not provided.   <code>json   { \"message\": \"User ID is required\" }</code></li> <li>Error (404): If user with the given ID is not found.   <code>json   { \"message\": \"User not found\" }</code></li> <li>Error (500): Server-side error.   <code>json   { \"message\": \"Error fetching user data\" }</code></li> </ul> </li> <li> <p><code>POST /api/user/change-password</code></p> </li> <li>Description: Allows an authenticated user to change their password.</li> <li>Request Body:     <code>json     {       \"currentPassword\": \"current_user_password\",       \"newPassword\": \"new_user_password\"     }</code>     (Details to be confirmed by code review)</li> <li>Response:<ul> <li>Success (200): Message confirming password change.</li> <li>Error Responses: (400) Bad Request (e.g., incorrect current password, weak new password), (401) Unauthorized, (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review.</p> </li> <li> <p><code>PUT /api/user/update</code></p> </li> <li>Description: Allows an authenticated user to update their own profile information.</li> <li>Request Body: User data to update (e.g., email, phone; To be determined by code review).</li> <li>Response:<ul> <li>Success (200): Updated user object.</li> <li>Error Responses: (400) Bad Request, (401) Unauthorized, (500) Server Error.</li> </ul> </li> <li>Note: Actual implementation details need code review.</li> </ul>"},{"location":"project/development/technical/api/#users","title":"Users","text":"<ul> <li><code>GET /api/users</code></li> <li>Description: Fetches a list of \"wastepickers\" (workers, identified by <code>user_type: 1</code>).</li> <li>Query Parameters: None.</li> <li> <p>Response:</p> <ul> <li>Success (200): An array of user objects (sensitive fields omitted). Returns sample data if no workers are found in the DB.   <code>json   [     {       \"wastepicker_id\": \"WP001\", // Application-specific worker ID       \"full_name\": \"Worker Full Name\",       \"user_type\": 1,       // ... other user fields     },     // ... more users   ]</code>   Sample Data (if no DB entries for workers):   <code>json   [     { \"wastepicker_id\": \"WP001\", \"full_name\": \"Jo\u00e3o Silva\", \"user_type\": 1, ... },     // ...   ]</code></li> <li>Error (500): Server-side error.   <code>json   { \"error\": \"Failed to fetch users\", \"details\": \"Error message string\" }</code></li> </ul> </li> <li> <p><code>GET /api/users/all</code></p> </li> <li>Description: Fetches all users from the <code>users</code> collection, regardless of their <code>user_type</code>.</li> <li>Query Parameters: None.</li> <li> <p>Response:</p> <ul> <li>Success (200): An array of all user objects (sensitive fields omitted).   <code>json   [     {       \"_id\": \"user_mongodb_object_id\",       \"full_name\": \"User Full Name\",       // ... other user fields including user_type     },     // ... more users   ]</code></li> <li>Error (500): Server-side error.   <code>json   { \"message\": \"Error fetching users data\" }</code></li> </ul> </li> <li> <p><code>POST /api/users/create</code></p> </li> <li>Description: Creates a new user.</li> <li>Request Body: User data for the new user (To be determined by code review).</li> <li>Response:<ul> <li>Success (201): Created user object.</li> <li>Error Responses: (400) Bad Request, (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review.</p> </li> <li> <p><code>PUT /api/users/update</code></p> </li> <li>Description: Updates an existing user's information. Likely requires user ID in the body or as a query parameter.</li> <li>Request Body: User data to update, including ID of the user (To be determined by code review).</li> <li>Response:<ul> <li>Success (200): Updated user object.</li> <li>Error Responses: (400) Bad Request, (404) Not Found, (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review. The path does not include an ID, so ID must be in payload.</p> </li> <li> <p><code>DELETE /api/users/delete</code></p> </li> <li>Description: Deletes a user. Likely requires user ID in the body or as a query parameter.</li> <li>Request Body: Object containing the ID of the user to delete, e.g. <code>{ \"id\": \"user_id\" }</code> (To be determined by code review).</li> <li>Response:<ul> <li>Success (200): Message confirming deletion.</li> <li>Error Responses: (400) Bad Request, (404) Not Found, (500) Server Error.</li> </ul> </li> <li> <p>Note: Actual implementation details need code review. The path does not include an ID, so ID must be in payload or query.</p> </li> <li> <p><code>POST /api/users/assign-wastepicker-ids</code></p> </li> <li>Description: Assigns <code>wastepicker_id</code> to users who are workers and do not have one.</li> <li>Request Body: None expected, or potentially parameters for assignment batch. (To be determined by code review).</li> <li>Response:<ul> <li>Success (200): Report of assignments made.</li> <li>Error Responses: (500) Server Error.</li> </ul> </li> <li>Note: Actual implementation details need code review.</li> </ul>"},{"location":"project/development/technical/api/#worker-collections","title":"Worker Collections","text":"<ul> <li><code>GET /api/worker-collections</code></li> <li>Description: Fetches data about material collections by workers, primarily from the <code>measurements</code> collection.</li> <li>Query Parameters:<ul> <li><code>worker_id</code> (optional <code>String</code>): ID of the worker to filter collections for.</li> <li><code>material_id</code> (optional <code>String</code>): ID of the material to filter collections for.</li> <li><code>period_type</code> (optional <code>String</code>): <code>weekly</code>, <code>monthly</code> (default), or <code>yearly</code>. Defines the time period for aggregation.</li> </ul> </li> <li>Response:<ul> <li>Success (200, <code>grouped: false</code>): Typically when <code>material_id</code> is specified or <code>period_type</code> is not 'yearly'. Returns top 10 workers by total weight collected for the criteria.   <code>json   {     \"grouped\": false,     \"data\": [       {         \"wastepicker_id\": \"WP001\",         \"worker_name\": \"Worker Name\",         \"totalWeight\": 123.45 // in kg       },       // ... more workers     ]   }</code></li> <li>Success (200, <code>grouped: true</code>): Typically for <code>period_type: 'yearly'</code> without a <code>material_id</code> filter. Returns data structured for a stacked bar chart, showing material breakdown for top 10 workers.   <code>json   {     \"grouped\": true,     \"workers\": [ // Top 10 workers by total weight       {         \"wastepicker_id\": \"WP001\",         \"worker_name\": \"Worker Name\",         \"totalWeight\": 500.50,         \"material_id_1\": 100.20, // Weight for material_id_1 (actual material ID as key)         \"material_id_2\": 200.30, // Weight for material_id_2         // ... weights for other materials collected by this worker       },       // ... more workers     ],     \"materials\": [ // List of unique materials collected by these top workers       { \"id\": \"material_id_1\", \"name\": \"Material Name 1\" },       { \"id\": \"material_id_2\", \"name\": \"Material Name 2\" },       // ... more materials     ]   }</code></li> <li>No Data (200): If no collection data is found for the given filters.   <code>json   {     \"noData\": true,     \"message\": \"N\u00e3o h\u00e1 coletas deste material em este per\u00edodo\" // or similar   }</code></li> <li>Error (500, often returns <code>noData:true</code>): Server-side error.   <code>json   {     \"noData\": true,     \"message\": \"Erro ao buscar dados de coletas. Por favor, tente novamente mais tarde.\"   }</code></li> </ul> </li> </ul>"},{"location":"project/development/technical/api/#worker-productivity","title":"Worker Productivity","text":"<ul> <li><code>GET /api/worker-productivity</code></li> <li>Description: Fetches data related to worker productivity metrics.</li> <li>Query Parameters: To be determined by code review (e.g., <code>worker_id</code>, <code>period_type</code>).</li> <li>Response:<ul> <li>Success (200): Productivity data for workers.</li> <li>Error Responses: (500) Server Error.</li> </ul> </li> <li>Note: Actual implementation details need code review.</li> </ul> <p>\u2190 Back to Main Page</p>"},{"location":"project/development/technical/architecture/","title":"Architecture","text":"<p>\u2190 Back to Main Page</p>"},{"location":"project/development/technical/architecture/#project-structure","title":"Project Structure","text":"<p>The project follows a standard Next.js project structure using the App Router:</p> <ul> <li><code>src/app</code>: Contains the core application code, including pages, layouts, and API routes.</li> <li><code>src/app/api</code>: Houses all backend API route handlers (Route Handlers).</li> <li><code>src/app/login</code>: Contains the login page UI and related components.</li> <li><code>src/app/page.tsx</code>: The main dashboard page component of the application.</li> <li><code>src/app/layout.tsx</code>: The root layout component for the application.</li> <li><code>src/components</code>: Contains reusable React components used across different parts of the application.</li> <li><code>src/components/Layout.tsx</code>: The layout component (sidebar, header) for authenticated sections of the application.</li> <li><code>src/lib</code>: Contains utility functions and library configurations.</li> <li><code>src/lib/mongodb.ts</code>: Handles the connection to the MongoDB database.</li> <li><code>src/models</code>: Defines Mongoose schemas and models for interacting with the database.</li> <li><code>src/models/index.ts</code>: Exports all defined models and provides a database connection function.</li> <li><code>public</code>: Contains static assets like images, SVGs, and fonts that are served directly.</li> <li><code>pages</code>: (Note: This project primarily uses the <code>app</code> directory for routing. While Next.js supports the <code>pages</code> directory for routing, this project does not currently have one. If added, files here would also become routes.)</li> </ul> <p>Key configuration files at the root:</p> <ul> <li><code>next.config.ts</code>: Configuration file for Next.js features and build process.</li> <li><code>tailwind.config.ts</code>: Configuration file for Tailwind CSS utility classes and theming.</li> <li><code>tsconfig.json</code>: Configuration file for the TypeScript compiler.</li> <li><code>package.json</code>: Lists project dependencies, scripts (like <code>dev</code>, <code>build</code>, <code>start</code>), and project metadata.</li> <li><code>generatepass.js</code>: A standalone Node.js script for generating bcrypt password hashes. See the \"Password Generation Script (<code>generatepass.js</code>)\" subsection under \"Project Structure\" for full details.</li> <li><code>eslint.config.mjs</code>: Configuration for ESLint, a static code analysis tool for identifying problematic patterns in JavaScript/TypeScript code.</li> <li><code>postcss.config.mjs</code>: Configuration for PostCSS, a tool for transforming CSS with JavaScript plugins.</li> </ul>"},{"location":"project/development/technical/architecture/#password-generation-script-generatepassjs","title":"Password Generation Script (<code>generatepass.js</code>)","text":"<ul> <li>Purpose: The <code>generatepass.js</code> script is a utility for generating password hashes using <code>bcrypt</code>. This is necessary because passwords should be stored in a hashed format for security, rather than as plain text.</li> <li>How to Use:<ol> <li>Modify Script: Open <code>generatepass.js</code> in a text editor. Locate the <code>password</code> variable (which defaults to <code>'123456'</code>) and change its value to the desired plain-text password you want to hash.     <code>javascript     // Inside generatepass.js     const password = 'your-desired-password-here';     // ... rest of the script</code></li> <li>Run from Command Line: Execute the script using Node.js:     <code>bash     node generatepass.js</code></li> <li>Output: The script will print the original plain-text password and the generated bcrypt hash to the console.     <code>Plaintext password: your-desired-password-here     Hashed password: $2b$10$.....................................................</code></li> </ol> </li> <li>Typical Use Cases:<ul> <li>Initial User Setup: When creating the first admin user or other initial users directly in the database.</li> <li>Test Accounts: For creating test user accounts with known passwords for development and testing purposes.</li> <li>Manual Database Entries: If you need to manually insert a user into the database and require a correctly hashed password.</li> </ul> </li> <li>Security Note:<ul> <li>Always change the default password (<code>'123456'</code>) in the script to your desired password before running it.</li> <li>This script is a development utility. It is not part of the production application's runtime and should not be deployed or made accessible in a production environment. Ensure it is used in a secure, local development context.</li> </ul> </li> </ul> <p>\u2190 Back to Main Page</p>"},{"location":"project/development/technical/database-schema/","title":"Database Schema","text":"<p>\u2190 Back to Main Page</p>"},{"location":"project/development/technical/database-schema/#data-models","title":"Data Models","text":"<p>The application uses Mongoose to define schemas and interact with the MongoDB database. The primary Mongoose models are defined in <code>src/models/index.ts</code>. However, as noted below, some API endpoints derive data from collections not strictly governed by these explicit models or use different field names than defined in the schemas.</p>"},{"location":"project/development/technical/database-schema/#defined-mongoose-models","title":"Defined Mongoose Models","text":"<p>The following models have schemas defined in <code>src/models/index.ts</code>:</p> <ol> <li> <p>Material (<code>MaterialSchema</code>)</p> <ul> <li>Collection Name: <code>materials</code> (as specified in the schema: <code>{ collection: 'materials' }</code>).</li> <li>Description: Represents a type of waste material.</li> <li>Schema Fields:<ul> <li><code>material_id</code>: <code>Number</code> (Required, Unique) - An application-specific identifier for the material.</li> <li><code>material</code>: <code>String</code> (Required) - The name of the material (e.g., \"Papel\u00e3o\", \"Pl\u00e1stico PET\"). This seems to be the primary name field in the schema.</li> <li><code>name</code>: <code>String</code> - Not explicitly in the schema but often used in API responses (e.g., in <code>/api/materials</code>). This might be an alias for <code>material</code> or populated from a different field in the <code>materials</code> collection if it's distinct from <code>waste_type</code>.</li> </ul> </li> </ul> </li> <li> <p>User (<code>UserSchema</code>)</p> <ul> <li>Collection Name: <code>users</code></li> <li>Description: Represents users of the system, including administrators and workers (wastepickers).</li> <li>Schema Fields:<ul> <li>Important Note on Field Usage: Developers should be aware that some API routes might expect or use field names not explicitly defined in this schema or with different casing/spacing. For instance, the login API (<code>/api/auth/login</code>) uses a <code>cpf</code> field which is not in the schema, and the birthdays API (<code>/api/birthdays</code>) refers to <code>\"Birth date\"</code> (with a space) which differs from the <code>birthdate</code> schema field. Always cross-verify with the specific API implementation.</li> <li><code>wastepicker_id</code>: <code>Number</code> (Unique, Sparse) - Specific identifier for wastepickers.</li> <li><code>user_id</code>: <code>Number</code> (Required, Unique) - General unique user identifier.</li> <li><code>user_type</code>: <code>Number</code> (Required) - Type of user (e.g., <code>0</code> for admin, <code>1</code> for wastepicker/worker).</li> <li><code>username</code>: <code>String</code> (Required, Unique) - Login username.</li> <li><code>password_hash</code>: <code>String</code> - Hashed password for the user. (Login API expects <code>password</code> in request, implying hashing before storage or comparison with this field).</li> <li><code>full_name</code>: <code>String</code> - Full name of the user.</li> <li><code>email</code>: <code>String</code> - Email address.</li> <li><code>phone</code>: <code>String</code> - Phone number.</li> <li><code>birthdate</code>: <code>Date</code> - User's birthdate. (Note: As mentioned above, the <code>/api/birthdays</code> API specifically uses a field named <code>\"Birth date\"</code> (with a space) from the database for workers, which might be an alternative or legacy field name not matching this schema field directly).</li> <li><code>active</code>: <code>Boolean</code> (Default: <code>true</code>) - Whether the user account is active.</li> <li><code>created_at</code>: <code>Date</code> (Default: <code>Date.now</code>) - Timestamp of user creation.</li> </ul> </li> <li>Other Fields Observed in DB/APIs (potentially not in schema but used, illustrating the note above):<ul> <li><code>cpf</code>: <code>String</code> (Used in login API <code>/api/auth/login</code>).</li> <li><code>coopeative_id</code>: <code>String</code> (Typo for <code>cooperative_id</code>?).</li> <li><code>\"Entry date\"</code>: <code>Date</code> (Entry date of the worker).</li> <li><code>PIS</code>: <code>String</code> (PIS number).</li> <li><code>RG</code>: <code>String</code> (RG number).</li> <li><code>gender</code>: <code>String</code>.</li> </ul> </li> </ul> </li> <li> <p>Stock (<code>StockSchema</code>)</p> <ul> <li>Collection Name: <code>stock</code></li> <li>Description: Intended to represent the current stock of a particular material.</li> <li>Schema Fields:<ul> <li><code>material_id</code>: <code>Number</code> (Required, Ref: <code>Material</code>) - Reference to the material.</li> <li><code>weight</code>: <code>Number</code> (Required) - Weight of the material in stock.</li> <li><code>date</code>: <code>Date</code> (Default: <code>Date.now</code>) - Date when the stock was recorded.</li> </ul> </li> <li>Note on Usage: While the <code>StockSchema</code> exists and defines a <code>stock</code> collection, the primary API route for dashboard stock data (<code>/api/stock</code>) dynamically calculates current stock levels primarily from the <code>measurements</code> (for additions) and <code>sales</code> (for subtractions) collections.     This <code>stock</code> collection and its Mongoose model might be intended for specific backend operations, historical data storage, manual data entry, or could be a legacy structure not fully utilized by the current dashboard's read APIs. Developers should verify its specific use case if they intend to interact directly with this collection.</li> </ul> </li> <li> <p>Collection (<code>CollectionSchema</code>)</p> <ul> <li>Collection Name: <code>collections</code></li> <li>Description: Intended to represent a record of materials collected by a worker.</li> <li>Schema Fields:<ul> <li><code>wastepicker_id</code>: <code>Number</code> (Required, Ref: <code>User</code>) - Reference to the worker.</li> <li><code>material_id</code>: <code>Number</code> (Required, Ref: <code>Material</code>) - Reference to the collected material.</li> <li><code>weight</code>: <code>Number</code> (Required) - Weight of the material collected.</li> <li><code>date</code>: <code>Date</code> (Default: <code>Date.now</code>) - Date of the collection.</li> </ul> </li> <li>Note on Usage: While the <code>CollectionSchema</code> exists and defines a <code>collections</code> collection (intended for worker collections), the primary API route for dashboard worker collection data (<code>/api/worker-collections</code>) dynamically calculates this data primarily from the <code>measurements</code> collection.     This <code>collections</code> collection and its Mongoose model might be intended for specific backend operations, historical data storage, manual data entry, or could be a legacy structure not fully utilized by the current dashboard's read APIs. Developers should verify its specific use case if they intend to interact directly with this collection.</li> </ul> </li> <li> <p>Price (<code>PriceSchema</code>)</p> <ul> <li>Collection Name: <code>prices</code></li> <li>Description: Intended to represent the price of a material at a certain point in time.</li> <li>Schema Fields:<ul> <li><code>material_id</code>: <code>Number</code> (Required, Ref: <code>Material</code>) - Reference to the material.</li> <li><code>price</code>: <code>Number</code> (Required) - Price of the material (likely per unit of weight, e.g., per kg).</li> <li><code>date</code>: <code>Date</code> (Default: <code>Date.now</code>) - Date when the price was set.</li> </ul> </li> <li>Note on Usage: While the <code>PriceSchema</code> exists and defines a <code>prices</code> collection, the primary API route for dashboard price fluctuation data (<code>/api/price-fluctuation</code>) dynamically calculates this data primarily from the <code>sales</code> collection (using fields like <code>price_kg</code>).     This <code>prices</code> collection and its Mongoose model might be intended for specific backend operations, historical data storage (e.g., base prices, price lists), manual data entry, or could be a legacy structure not fully utilized by the current dashboard's read APIs. Developers should verify its specific use case if they intend to interact directly with this collection.</li> </ul> </li> </ol>"},{"location":"project/development/technical/database-schema/#other-important-collections-inferred-from-api-routes","title":"Other Important Collections (Inferred from API Routes)","text":"<p>Several API routes heavily rely on collections that might not have explicit Mongoose schemas defined in <code>src/models/index.ts</code> or are used with more flexibility than the defined schemas suggest. These are crucial for the application's functionality:</p> <ul> <li> <p><code>measurements</code></p> <ul> <li>Description: Stores records of individual material measurements or collections by workers. This collection is central to calculating current stock (total input) and worker collection statistics.</li> <li>Key Fields (inferred from API usage):<ul> <li><code>material_id</code>: String or Number (referencing a material, often the <code>_id</code> from the <code>materials</code> collection or an application-specific ID).</li> <li><code>Weight</code>: Number (weight of material, typically in kg).</li> <li><code>timestamp</code>: Date or Number (when the material was measured/collected).</li> <li><code>wastepicker_id</code>: String or Number (e.g., <code>WP001</code>, referencing a user/worker).</li> </ul> </li> </ul> </li> <li> <p><code>sales</code></p> <ul> <li>Description: Stores records of material sales. This collection is used for calculating earnings, price fluctuations, and current stock (total output).</li> <li>Key Fields (inferred from API usage):<ul> <li><code>material_id</code>: String or Number (referencing a material).</li> <li><code>date</code>: Date or String (date of the sale).</li> <li><code>price_kg</code>: Number (price per kg, sometimes seen as <code>price/kg</code> or <code>unit_price</code>).</li> <li><code>weight_sold</code>: Number (quantity sold, typically in kg).</li> <li><code>buyer</code>: String (name or ID of the buyer, if available).</li> </ul> </li> </ul> </li> </ul>"},{"location":"project/development/technical/database-schema/#important-note-on-data-model-usage","title":"Important Note on Data Model Usage","text":"<p>A key takeaway for developers is that while Mongoose schemas are defined in <code>src/models/index.ts</code>, their application and usage can vary, especially concerning API data retrieval for the dashboard.</p> <p>1. API Data Sourcing vs. Defined Schemas: -   <code>Stock</code>, <code>Collection</code>, <code>Price</code> Models: As detailed in their respective notes, the Mongoose models <code>StockSchema</code>, <code>CollectionSchema</code>, and <code>PriceSchema</code> (defining <code>stock</code>, <code>collections</code>, and <code>prices</code> collections) are not the primary sources for the main dashboard API routes (<code>/api/stock</code>, <code>/api/worker-collections</code>, <code>/api/price-fluctuation</code>). These routes dynamically calculate data primarily from the <code>measurements</code> and <code>sales</code> collections. The <code>stock</code>, <code>collections</code>, and <code>prices</code> collections might be for other backend uses, historical data, manual entries, or are legacy. -   <code>Material</code> Model: The <code>MaterialSchema</code> correctly defines its collection as <code>materials</code>.</p> <p>2. Field Name and Usage Variations: -   User Model Example: The <code>UserSchema</code> defines fields like <code>birthdate</code>. However, some APIs expect or use fields not explicitly in the schema (e.g., <code>cpf</code> for <code>/api/auth/login</code>) or use different naming conventions (e.g., <code>\"Birth date\"</code> with a space by <code>/api/birthdays</code>, as highlighted in the <code>User</code> model section). -   Other similar variations might exist across different models and API routes.</p> <p>3. Implications for Development: -   The Mongoose models in <code>src/models/index.ts</code> might not always be the single source of truth for understanding data structures as used by all API endpoints, particularly read-heavy dashboard APIs. -   Some models might represent a target schema, are used for specific write operations, or are partially legacy. -   The application employs a dynamic approach for some data aggregation and retrieval, interacting directly with MongoDB collections.</p> <p>Recommendation: Developers must always cross-verify data models, collection names, and field structures by inspecting the relevant API route implementations (<code>src/app/api/...</code>) and, if possible, the actual database contents. This is crucial for understanding how data is fetched, processed, and returned. The descriptions for <code>measurements</code> and <code>sales</code> collections are based on their inferred usage in the current API routes.</p> <p>\u2190 Back to Main Page</p>"},{"location":"project/development/technical/frontend/","title":"Front-End","text":"<p>\u2190 Back to Main Page</p>"},{"location":"project/development/technical/frontend/#frontend-components","title":"Frontend Components","text":"<p>The frontend is built using Next.js (App Router) and React with TypeScript. Tailwind CSS is used for styling, and <code>react-chartjs-2</code> for data visualization.</p>"},{"location":"project/development/technical/frontend/#main-layout-srcapplayouttsx","title":"Main Layout (<code>src/app/layout.tsx</code>)","text":"<ul> <li>Description: This is the root layout for the entire application. It establishes the basic HTML structure (<code>&lt;html&gt;</code>, <code>&lt;body&gt;</code>).</li> <li>Functionality:<ul> <li>Applies global styles from <code>globals.css</code>.</li> <li>Configures and applies the Geist Sans and Geist Mono fonts using <code>next/font</code>.</li> <li>Sets default metadata (title, description) for the application, which can be overridden by individual pages.</li> <li>Wraps <code>children</code> components, meaning all pages will inherit this structure.</li> </ul> </li> </ul>"},{"location":"project/development/technical/frontend/#application-layout-srccomponentslayouttsx","title":"Application Layout (<code>src/components/Layout.tsx</code>)","text":"<ul> <li>Description: Provides the main navigational structure (sidebar and header) for authenticated sections of the application, such as the main dashboard.</li> <li>Functionality:<ul> <li>Displays a sidebar navigation menu with links to different sections (e.g., \"Dashboard\", \"Trabalhadores\", \"Materiais\").</li> <li>Highlights the currently active path in the sidebar.</li> <li>Includes a header, typically for user information or actions like logout.</li> <li>Manages user authentication state:<ul> <li>Checks for an <code>auth_token</code> in <code>localStorage</code> on the client-side.</li> <li>Redirects to <code>/login</code> if the token is missing.</li> <li>Provides a <code>handleLogout</code> function to clear the token and redirect to the login page.</li> </ul> </li> <li>Wraps the main content of the authenticated pages (<code>children</code>).</li> </ul> </li> </ul>"},{"location":"project/development/technical/frontend/#dashboard-page-srcapppagetsx","title":"Dashboard Page (<code>src/app/page.tsx</code>)","text":"<ul> <li>Description: The main dashboard page displayed after successful user login. It provides an overview of various metrics related to material collection, sales, stock, and worker activity.</li> <li>Functionality:<ul> <li>User Authentication &amp; Welcome: Retrieves user data from <code>localStorage</code> and potentially fetches more details from <code>/api/user</code>. Displays a welcome message.</li> <li>Data Fetching: Asynchronously fetches data from multiple API endpoints:<ul> <li><code>/api/materials</code> (for material filter options, mapping IDs to names)</li> <li><code>/api/users</code> (for worker filter options)</li> <li><code>/api/stock</code> (for current stock levels)</li> <li><code>/api/earnings-comparison</code> (for historical earnings)</li> <li><code>/api/worker-collections</code> (for materials collected by workers)</li> <li><code>/api/price-fluctuation</code> (for material price history)</li> <li><code>/api/birthdays</code> (for upcoming worker birthdays)</li> <li>Manages loading states while data is being fetched.</li> </ul> </li> <li>Filtering: Provides dropdown filters that affect the data displayed in charts:<ul> <li>Material Filter: For Stock, Earnings, Worker Collections, Price Fluctuation charts.</li> <li>Worker Filter: For the Worker Collections chart.</li> <li>Period Filter: For Earnings and Worker Collections charts (Weekly, Monthly, Yearly).</li> </ul> </li> <li>Statistics Cards: Displays key summary statistics with icons (e.g., total materials, total workers, total stock, current month's earnings).</li> <li>Charts (using <code>react-chartjs-2</code>):<ul> <li>Estoque Atual (Current Stock): Doughnut chart showing stock quantities per material.</li> <li>Ganhos (Earnings): Line chart showing earnings over the selected period.</li> <li>Coletas de Trabalhadores (Worker Collections): Horizontal Bar chart (or Stacked Bar for yearly overview) showing worker collection performance.</li> <li>Flutua\u00e7\u00e3o de Pre\u00e7os (Price Fluctuation): Line chart showing price trends for selected materials or top materials.</li> <li>Each chart handles \"no data\" scenarios appropriately.</li> </ul> </li> <li>Birthdays Section: Lists workers having birthdays in the current month.</li> <li>Helper Functions: Includes utility functions like <code>formatCurrency</code> and <code>formatWeight</code>.</li> <li>State Management: Uses React hooks (<code>useState</code>, <code>useEffect</code>, <code>useMemo</code>) for managing component state, data fetching logic, and memoizing calculations.</li> </ul> </li> </ul>"},{"location":"project/development/technical/frontend/#other-notable-components-inferred","title":"Other Notable Components (Inferred)","text":"<ul> <li>The structure of <code>src/app/page.tsx</code> suggests that it internally manages distinct UI sections that could be (or are implicitly) sub-components, such as:<ul> <li>Filter control group.</li> <li>Individual statistic display cards.</li> <li>Container components for each chart.</li> <li>List items for birthdays. While these might be part of the main page file, they represent logical component blocks.</li> </ul> </li> </ul> <p>\u2190 Back to Main Page</p>"},{"location":"project/management/deliverables/","title":"Deliverables","text":"<p>\u2190 Back to Main Page</p> Deliverable Description Associated Task Delivery Date Format Acceptance Criteria Doctor and Administrator Registration Allows registration of doctors and administrators in the system. Implementation of user creation functionality with validations. 18/03/2025 Source code, integration tests, API documentation. User can register successfully. Validations for CPF, email, and password. Unit tests cover the registration flow. Login Functionality Allows doctors and administrators to access their areas in the system. Implementation of user authentication. 20/03/2025 Source code, integration tests, API documentation. Successful login with authentication token. Error messages for failures. Security tests against attacks. Profile Edit and Deletion Allows editing of profile data, such as password and contact information. Development of the profile editing interface and routes. 25/03/2025 Source code, interface prototypes, functionality tests. User can update their information. Data validation. Notification to user upon update. Document Creation and Listing Allows administrators to create and list existing documents. Development of the document administration interface. 30/03/2025 Source code, interface prototypes, tests. Administrator can create document. Document appears in the listing. Filters working in the interface. Notification System Sends notifications to doctors about events or updates. Implementation of the notification system. 05/04/2025 Source code, integration documentation. Automatic notifications based on events. Tests ensure message consistency. Subscription Management Allows doctors to manage subscriptions and payment plans. Creation of financial panel and integration with payment gateway. 10/04/2025 Source code, integration tests, API documentation. Doctor can view and modify plan. Correct integration with the payment gateway. Documented API Documentation of the system's API. Create complete API documentation. 12/04/2025 Markdown or Swagger document. Complete documentation with examples. Publicly available. Automated Tests Automated tests to ensure system quality. Implementation of unit, integration, and interface tests. 15/04/2025 Test scripts, coverage reports. Coverage of at least 80%. Tests run in CI/CD environment. Deployment Document System deployment guide, including server setup, database, and dependencies. Create deployment documentation. 20/04/2025 Markdown or PDF document. Complete deployment guide with no errors. Tested in production environment."},{"location":"project/management/deliverables/#revision-history","title":"Revision History","text":"Date Version Changes Authors 2025-03-28 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to Main Page</p>"},{"location":"project/management/issue-tracking/","title":"Issue Tracking","text":"<p>\u2190 Back to Main Page</p> <p>This document outlines the Issue Tracking process for managing and resolving issues throughout the project lifecycle. Effective issue tracking ensures that problems are identified early, tracked efficiently, and resolved in a timely manner.</p>"},{"location":"project/management/issue-tracking/#issue-tracking-process","title":"Issue Tracking Process","text":"Stage Objective Key Actions/Details 1. Issue Identification Identify and document issues that may impact the project. - Record issues as they arise during development, testing, or post-launch.  - Classify issues by severity, impact, and urgency.  - Capture detailed descriptions, steps to reproduce, and any relevant screenshots or logs. 2. Issue Prioritization Assign priority levels to each issue based on its impact on the project. -Critical : Must be resolved immediately to prevent system failure.  - High : Needs urgent attention to avoid major disruptions.  - Medium : Important but does not affect critical functionalities.  - Low : Minor impact, can be addressed later. 3. Issue Assignment Assign issues to the appropriate team members for resolution. - Allocate issues based on team member expertise and workload.  - Set clear expectations on resolution deadlines and outcomes.  - Provide necessary resources or information for issue resolution. 4. Issue Resolution Resolve issues by implementing fixes or workarounds. - Address root causes of issues to prevent recurrence.  - Implement solutions and verify that the issue is fixed.  - Test thoroughly to ensure that the fix does not introduce new problems. 5. Verification and Closure Verify that resolved issues meet the defined acceptance criteria and close them. - Review the resolution with stakeholders and the team.  - Confirm that the issue no longer affects the project or product.  - Close the issue once it\u2019s resolved and communicate the outcome. 6. Documentation and Reporting Maintain a record of issues, resolutions, and lessons learned. - Update the issue tracking system with detailed information on each issue.  - Generate reports on issues, resolutions, and ongoing challenges.  - Use issue tracking data for continuous improvement and future project planning."},{"location":"project/management/issue-tracking/#revision-history","title":"Revision History","text":"Date Version Changes Authors 2025-03-28 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to Main Page</p>"},{"location":"project/management/lessons-learned/","title":"Lessons Learned","text":"<p>\u2190 Back to Main Page</p> Lesson Action Result 1. Importance of Defining Requirements Clearly Clearly and precisely defining the requirements is essential for the successful execution of the project. Early documentation and stakeholder involvement are key. Constant scope changes caused rework and delays. A deeper analysis at the beginning could have saved time and resources. 2. The Importance of Automated Testing The adoption of automated testing was a positive change to improve system reliability and maintenance. Implementing automated tests ensures that changes do not break existing functionality, saving time in the long run. 3. Dependency and Update Management Use version control tools like <code>npm</code>to manage external dependencies and ensure compatibility across all system versions. By managing dependencies and versions effectively, compatibility issues were avoided and stability was ensured. 4. Communication Between Team and Stakeholders Establish regular feedback meetings to ensure all stakeholders are aligned on project goals and deliverables. Improved transparency, aligned expectations, and the ability to adjust priorities based on continuous feedback. 5. The Value of Adequate Documentation Properly document each step of the development process, including system architecture, workflows, and API details. Well-organized documentation made deployment and future updates faster and less prone to errors, facilitating new team member training. 6. Scalability Planning Implement scalability practices such as microservices and load balancing from the start to accommodate growth. The system\u2019s scalability improved, supporting more users and data without sacrificing performance. 7. The Importance of Continuous Integration and Automated Deployment Implement CI/CD pipelines for frequent integration and automation of deployments to ensure faster releases and error identification. Continuous integration and automated delivery reduced production errors and improved team efficiency. 8. Challenges with Subscription Management and Payment Processing Conduct detailed analysis, select payment providers carefully, and implement load testing and payment simulations. Payment and subscription management became more efficient and stable, improving the user experience and system reliability."},{"location":"project/management/lessons-learned/#revision-history","title":"Revision History","text":"Date Version Changes Authors 2025-03-28 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to Main Page</p>"},{"location":"project/management/meetings/","title":"Meeting Notes","text":"<p>\u2190 Back to Main Page</p>"},{"location":"project/management/meetings/#schedule","title":"Schedule","text":"<p>Aqui est\u00e1 a tabela completa com todas as reuni\u00f5es at\u00e9 o final do projeto em 25 de agosto de 2025, seguindo a cad\u00eancia que voc\u00ea definiu.  </p>"},{"location":"project/management/meetings/#table","title":"Table","text":"Meeting Date Participants Objective 1. Weekly Software Team Alignment 02/04/2025 Software Development Team Align ongoing tasks, discuss blockers, and share updates. 2. Monthly Alignment \u2013 Engineering &amp; Marketing 09/04/2025 Production Engineering Teams, Content Team, Marketing Team (Netherlands) Discuss cross-team collaboration, content creation, and marketing. 3. Sprint Planning 11/04/2025 Software Development Team, Product Owner Plan tasks and priorities for the upcoming sprint. 4. Sprint Control Point \u2013 Scrum Master 16/04/2025 Software Development Team, Scrum Master Weekly review of sprint progress, impediments, and adjustments. 5. Sprint Control Point \u2013 Product Manager 23/04/2025 Software Development Team, Product Manager Biweekly review of sprint outcomes and strategic alignment. 6. Weekly Software Team Alignment 09/04/2025 Software Development Team Align ongoing tasks, discuss blockers, and share updates. 7. Sprint Control Point \u2013 Scrum Master 16/04/2025 Software Development Team, Scrum Master Weekly review of sprint progress, impediments, and adjustments. 8. Sprint Planning 25/04/2025 Software Development Team, Product Owner Plan tasks and priorities for the upcoming sprint. 9. Sprint Control Point \u2013 Product Manager 07/05/2025 Software Development Team, Product Manager Biweekly review of sprint outcomes and strategic alignment. 10. Weekly Software Team Alignment 14/05/2025 Software Development Team Align ongoing tasks, discuss blockers, and share updates. 11. Monthly Alignment \u2013 Engineering &amp; Marketing 16/05/2025 Production Engineering Teams, Content Team, Marketing Team (Netherlands) Discuss cross-team collaboration, content creation, and marketing. 12. Sprint Control Point \u2013 Scrum Master 21/05/2025 Software Development Team, Scrum Master Weekly review of sprint progress, impediments, and adjustments. 13. Sprint Planning 30/05/2025 Software Development Team, Product Owner Plan tasks and priorities for the upcoming sprint. 14. Sprint Control Point \u2013 Product Manager 04/06/2025 Software Development Team, Product Manager Biweekly review of sprint outcomes and strategic alignment. 15. Weekly Software Team Alignment 11/06/2025 Software Development Team Align ongoing tasks, discuss blockers, and share updates. 16. Monthly Alignment \u2013 Engineering &amp; Marketing 13/06/2025 Production Engineering Teams, Content Team, Marketing Team (Netherlands) Discuss cross-team collaboration, content creation, and marketing. 17. Sprint Control Point \u2013 Scrum Master 18/06/2025 Software Development Team, Scrum Master Weekly review of sprint progress, impediments, and adjustments. 18. Sprint Planning 27/06/2025 Software Development Team, Product Owner Plan tasks and priorities for the upcoming sprint. 19. Sprint Control Point \u2013 Product Manager 02/07/2025 Software Development Team, Product Manager Biweekly review of sprint outcomes and strategic alignment. 20. Weekly Software Team Alignment 09/07/2025 Software Development Team Align ongoing tasks, discuss blockers, and share updates. 21. Monthly Alignment \u2013 Engineering &amp; Marketing 11/07/2025 Production Engineering Teams, Content Team, Marketing Team (Netherlands) Discuss cross-team collaboration, content creation, and marketing. 22. Sprint Control Point \u2013 Scrum Master 16/07/2025 Software Development Team, Scrum Master Weekly review of sprint progress, impediments, and adjustments. 23. Sprint Planning 25/07/2025 Software Development Team, Product Owner Plan tasks and priorities for the upcoming sprint. 24. Sprint Control Point \u2013 Product Manager 30/07/2025 Software Development Team, Product Manager Biweekly review of sprint outcomes and strategic alignment. 25. Weekly Software Team Alignment 06/08/2025 Software Development Team Align ongoing tasks, discuss blockers, and share updates. 26. Monthly Alignment \u2013 Engineering &amp; Marketing 08/08/2025 Production Engineering Teams, Content Team, Marketing Team (Netherlands) Discuss cross-team collaboration, content creation, and marketing. 27. Sprint Control Point \u2013 Scrum Master 13/08/2025 Software Development Team, Scrum Master Weekly review of sprint progress, impediments, and adjustments. 28. Sprint Planning 22/08/2025 Software Development Team, Product Owner Final sprint planning before project conclusion. 29. Final Sprint Control Point \u2013 Product Manager 25/08/2025 Software Development Team, Product Manager Last review of sprint outcomes before project completion."},{"location":"project/management/meetings/#revision-history","title":"Revision History","text":"Date Version Changes Authors 03/28/2024 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to Main Page</p>"},{"location":"project/management/roadmap/","title":"Project Roadmap","text":"<p>\u2190 Back to Main Page</p>"},{"location":"project/management/roadmap/#overview","title":"Overview","text":"<p>The roadmap outlines the phases and steps involved in the development and delivery of the user and content management system for doctors and administrators. The process follows an agile approach, ensuring continuous iteration, feedback, and improvement.</p> Phase Timeline Goals Phase 1: Planning and Requirement Definition Month 1 - Map the core features: Identify and prioritize the essential features for the MVP.  - Establish resources: Ensure necessary technology and team members are in place.  - Identify success metrics: Define key performance indicators (KPIs) to measure success. Phase 2: Design and Architecture Month 2 - Finalize design for screens: Complete designs for key user screens (login, dashboard, etc.).  - Define database structure: Establish the structure for user and content data.  - Create wireframes and prototypes: Design wireframes and interactive prototypes. Phase 3: Initial Development and MVP Month 3-4 - Build initial version: Develop the first version of the system with core functionalities.  - Test essential functionalities: Ensure that user registration, login, and user management work as intended.  - Ensure system operations: Verify that the system operates smoothly, focusing on core features. Phase 4: Testing and Validation Month 5 - Validate MVP functionality: Ensure the MVP meets all requirements and performs well with real users.  - Identify improvements: Based on user feedback, identify areas for improvement in design and functionality.  - Perform performance and security testing: Ensure the system performs under load and adheres to security standards. Phase 5: Launch and Implementation Month 6 - Ensure system stability: Ensure that the system runs smoothly in production without major issues.  - Provide user training: Educate doctors and administrators on how to use the system.  - Prepare user documentation: Ensure end-users have access to user guides and support materials. Phase 6: Continuous Iteration and Improvements Month 7 onwards - Make adjustments: Update the system based on user feedback and new needs.  - Release regular updates: Regularly update the system to fix bugs and add features.  - Expand the platform: Add new features, such as reports and integrations."},{"location":"project/management/roadmap/#revision-history","title":"Revision History","text":"Date Version Changes Authors 2025-03-28 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to Main Page</p>"},{"location":"project/management/workflow/","title":"Project Workflow","text":"<p>\u2190 Back to Main Page</p> <p>This document outlines the Project Workflow, describing the process from initial planning to final delivery. The workflow details the key steps, responsibilities, and activities to ensure smooth execution of the project.</p>"},{"location":"project/management/workflow/#macro-phases-of-the-project-workflow","title":"Macro Phases of the Project Workflow","text":"<p>Based on the meeting schedule and workflow principles, the macro phases of the project are defined as follows:</p> Phase Objective Key Activities Responsible Parties 1. Initiation Kickstart the project by defining its purpose, scope, and objectives. - Stakeholder identification and engagement  - Project charter creation, including high-level goals and budget  - Establishment of project team and roles Project Manager 2. Planning Plan the project\u2019s roadmap, resources, and timelines. - Define project deliverables, timelines, and milestones  - Risk management and identification of potential obstacles  - Detailed project schedule creation with task dependencies Project Manager, Risk Manager 3. Execution and Iteration Execute the project plan and iterate through sprints to deliver incremental value. - Sprint planning and task prioritization  - Regular sprint reviews and adjustments  - Continuous communication with stakeholders and team members Scrum Master, Product Owner 4. Monitoring and Controlling Ensure the project stays on track by monitoring its performance and addressing issues. - Tracking progress against planned timelines and milestones  - Managing project scope and quality control  - Adjustments based on feedback and performance metrics Project Manager, Quality Manager 5. Closing Finalize the project, ensuring all deliverables are met and closure is achieved. - Final testing and validation of deliverables  - Documentation of project outcomes, lessons learned, and post-project reviews  - Handover of completed project to stakeholders and closure of all activities QA Manager, Project Manager"},{"location":"project/management/workflow/#revision-history","title":"Revision History","text":"Date Version Changes Authors 03/28/2024 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to Main Page</p>"},{"location":"project/product/mvp/","title":"Minimum Viable Product (MVP)","text":"<p>\u2190 Back to Main Page</p> <p>The Minimum Viable Product (MVP) represents the first functional version of the system that delivers core value to users while requiring minimal development effort. This document outlines the scope, features, and success criteria for the MVP phase.</p>"},{"location":"project/product/mvp/#mvp-goals","title":"MVP Goals","text":"<p>The MVP aims to:</p> Goal Description Deliver essential functionalities with minimal complexity Focus on core features that provide value to users. Validate core hypotheses and user needs Test the system with real users to ensure it meets their needs. Gather early feedback for iterative improvements Use feedback from users to guide future development. Provide a working foundation for future enhancements Build a stable base to expand upon in future versions."},{"location":"project/product/mvp/#mvp-scope","title":"MVP Scope","text":""},{"location":"project/product/mvp/#included-features","title":"Included Features","text":"<p>The MVP will include the following key functionalities:</p> Feature ID Feature Name Description Related Epic F-01 Scale Integration Measure and record weight via hardware. EP-01 F-02 API Data Sync Send weight data to the cloud in real-time. EP-02 F-03 User Authentication Secure login for different user roles. EP-05 F-04 Weight History Tracking Allow users to review past measurements. EP-03 F-05 Mobile Interface Provide a basic UI for users to interact. EP-03 F-06 Data Encryption Securely store and transmit collected data. EP-05"},{"location":"project/product/mvp/#excluded-features-for-future-releases","title":"Excluded Features (For Future Releases)","text":"<p>The following features are not included in the MVP but are planned for later iterations:</p> Feature Reason for Exclusion Multi-center management To be added in a future version. Advanced analytics and reporting Will be implemented after core functionalities. Offline mode for data collection Requires additional infrastructure. User notifications and alerts Not critical for MVP functionality. Customizable dashboard Future release after user feedback."},{"location":"project/product/mvp/#mvp-success-criteria","title":"MVP Success Criteria","text":"<p>The MVP will be considered successful if it meets the following criteria:</p> Criterion Description System Stability The core functionalities operate without critical bugs. Basic Usability Users can easily interact with the system. Data Accuracy Weight measurements are precise and reliably stored. Authentication Security User accounts are protected with authentication mechanisms. Real-Time Sync Weight data is transmitted to the cloud without significant delays. User Adoption At least [X]% of test users successfully complete key workflows."},{"location":"project/product/mvp/#next-steps","title":"Next Steps","text":"<p>Once the MVP is deployed, the next steps will include:</p> Step Description Gathering user feedback Collect insights from users for feature prioritization. Fixing bugs and improving usability Address issues and improve the user experience. Expanding features based on user needs Add features based on feedback and market demand. Planning Version 1.0 Use MVP insights to guide the development of Version 1.0."},{"location":"project/product/mvp/#conclusion","title":"Conclusion","text":"<p>The MVP serves as the foundation for product validation and further enhancements. By focusing on essential features, it allows for early testing, iteration, and user feedback collection before full-scale development.</p> <p>For updates on the MVP progress, refer to the Project Roadmap.</p>"},{"location":"project/product/mvp/#revision-history","title":"Revision History","text":"Date Version Changes Authors 2025-03-28 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to Main Page</p>"},{"location":"project/product/overview/","title":"Product Overview","text":"<p>\u2190 Back to Main Page</p>"},{"location":"project/product/overview/#product-description","title":"Product Description","text":"<p>The [Product Name] is a cutting-edge solution designed to address [insert the core problem your product solves]. With its advanced features and user-centric design, the product offers a seamless experience that aims to improve [insert the target user's main benefit].</p> <p>It is developed with modern technologies to provide high scalability, security, and performance. Whether you're a small business, a growing startup, or an enterprise, [Product Name] is built to help you meet your goals more efficiently and effectively.</p>"},{"location":"project/product/overview/#core-features","title":"Core Features","text":"Feature Name Description Benefit/Value Feature 1 [Brief description of Feature 1] This feature allows users to [explain the value and function of the feature]. Feature 2 [Brief description of Feature 2] With this feature, users can [explain the benefit and how it solves a problem]. Feature 3 [Brief description of Feature 3] This feature enables users to [describe the problem it addresses and how it enhances user experience]. Feature 4 [Brief description of Feature 4] Aiming at [target audience], it helps users [explain what the feature achieves]."},{"location":"project/product/overview/#target-audience","title":"Target Audience","text":"<p>[Product Name] is primarily aimed at:</p> Target Group Description Small and Medium Businesses (SMBs) For businesses seeking an affordable yet powerful solution to [describe problem the product solves]. Enterprises Designed to scale with enterprises, offering [features] to help streamline operations and improve performance. Freelancers and Individuals Perfect for individuals needing a [describe product use case] without the complexity of traditional enterprise solutions."},{"location":"project/product/overview/#benefits","title":"Benefits","text":"Benefit Description Scalability Our product is designed to grow with your business. Whether you're a startup or an enterprise, [Product Name] can scale to meet your needs without compromising performance. User-friendly Interface The intuitive design makes it easy for both technical and non-technical users to navigate the platform and get started right away. Security Built with the latest security protocols, [Product Name] ensures that your data is protected with end-to-end encryption and regular security updates. Customization The product offers flexible configurations, allowing users to tailor the platform to their specific requirements."},{"location":"project/product/overview/#technical-specifications","title":"Technical Specifications","text":"Attribute Details Platform Web-based application (with mobile app available on iOS/Android). Technology Stack Frontend: [Frontend technologies used, e.g., React, Vue.js]<code>&lt;br&gt;</code> Backend: [Backend technologies used, e.g., Node.js, Python] <code>&lt;br&gt;</code> Database: [Database technologies, e.g., PostgreSQL, MongoDB] <code>&lt;br&gt;</code> Hosting: [Hosting provider or architecture, e.g., AWS, Google Cloud] Supported Devices Desktop (Windows, macOS), Mobile (iOS, Android)"},{"location":"project/product/overview/#product-roadmap","title":"Product Roadmap","text":"Quarter Milestones Q1 Initial Launch: Full-feature release.<code>&lt;br&gt;</code> User onboarding and initial feedback collection. Q2 Feature Expansion: Enhanced reporting and analytics.<code>&lt;br&gt;</code> Mobile app improvements. Q3 Integration &amp; Automation: API integrations with popular platforms.<code>&lt;br&gt;</code> Workflow automation and advanced user settings. Q4 Enterprise Features: Enterprise-level scalability.<code>&lt;br&gt;</code> Additional security features and compliance updates."},{"location":"project/product/overview/#revision-history","title":"Revision History","text":"Date Version Changes Authors 2025-03-28 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to Main Page</p>"},{"location":"project/product/product-backlog-building/","title":"Product Backlog Building","text":"<p>\u2190 Back to Main Page</p>"},{"location":"project/product/product-backlog-building/#guide-to-reviewing-this-documentation","title":"Guide to Reviewing This Documentation","text":"<p>This document outlines the functional and non-functional requirements for the Data Management System, which integrates a hardware-connected scale, an API, and a mobile application. The documentation follows a structured approach to ensure clarity and completeness.</p>"},{"location":"project/product/product-backlog-building/#how-to-use-this-documentation","title":"How to Use This Documentation","text":"<ul> <li>Functional Requirements (FR-00) - The key capabilities the system must implement.</li> <li>Non-Functional Requirements (NFR-00) - The quality attributes ensuring system performance, security, and usability.</li> <li>Themes (TM-00) - High-level system areas grouping functionalities.</li> <li>Epics (EP-00) - Major features that contribute to the system\u2019s development.</li> <li>Capabilities (C-00) - The abilities the system must support.</li> <li>Features (F-00) - Specific technical functionalities fulfilling each capability.</li> <li>User Stories (US-00) - Individual use cases defining how users interact with the system.</li> <li>Backlog - A detailed, structured representation of all functionalities. (After have all topics, we can construct that)</li> </ul> <p>Each section follows a progressive breakdown of the system\u2019s structure, from high-level requirements to detailed functionalities. Nothing in this document is set in stone; if you notice an error, please discuss it with the team.</p>"},{"location":"project/product/product-backlog-building/#1-functional-requirements","title":"1. Functional Requirements","text":"<p>Defines the system's core functionalities. What the system must do</p> # Description FR-01 The system must have a hardware-integrated scale prototype. FR-02 The system must have an API. FR-03 The system must have a mobile application (APP). FR-04 The system must align with the Implementation Guide. <p>(Additional functional requirements \u2026)</p>"},{"location":"project/product/product-backlog-building/#2-non-functional-requirements","title":"2. Non-Functional Requirements","text":"<p>Specifies quality attributes that ensure the system meets expectations for performance, security, usability, scalability, etc... How the system must do functional requirements</p> # Type Description NFR-01 Reliability Thescale must be resistant to environmental conditions (dust, moisture, impact). NFR-02 Performance TheAPI must process weight data in real-time with minimal latency. NFR-03 Usability The APP must beeasy to use for waste pickers with low digital literacy. NFR-04 Scalability The system must be able tosupport multiple cooperative centers. NFR-05 Security The API must ensuresecure authentication for users. NFR-06 Reliability Thescale must accurately weigh the collected material. <p>(Additional non-functional requirements \u2026)</p>"},{"location":"project/product/product-backlog-building/#3-themes","title":"3. Themes","text":"<p>Themes categorize major system areas, grouping functionalities under broad topics.</p> # Theme Description TM-01 Hardware Project Design and implementation of electronic components. TM-02 Hardware Integration Development and integration of the scale prototype. TM-03 System Architecture API design and alignment with the implementation guide. TM-04 Security &amp; Compliance Secure authentication and data protection mechanisms. TM-05 Scalability &amp; Performance Real-time processing and multi-center support. TM-06 User Experience Ensuring usability for waste pickers and cooperative centers. <p>(Additional themes \u2026)</p>"},{"location":"project/product/product-backlog-building/#4-epics","title":"4. Epics","text":"<p>Epics define high-level features that contribute to system development.</p> # Epic Description EP-01 Scale Prototype Development Design and build the hardware-integrated scale prototype. EP-02 API Development Implement the API for data collection, processing, and storage. EP-03 Mobile App Development Create the mobile application for user interaction. EP-04 Implementation Guide Alignment Ensure compliance with the implementation guide. EP-05 Security &amp; Authentication Develop secure authentication mechanisms. EP-06 Usability &amp; Accessibility Optimize UI/UX for waste pickers and cooperative centers. EP-07 System Performance &amp; Scalability Optimize for real-time data processing and multiple centers. EP-08 Hardware Resilience Ensure durability against environmental conditions. <p>(Additional epics \u2026)</p>"},{"location":"project/product/product-backlog-building/#5-capabilities","title":"5. Capabilities","text":"<p>Capabilities describe the system's technical abilities to support key functionalities.</p> # Capability Description C-01 Weight Measurement Accurately measure weight using the scale prototype. C-02 Real-Time Data Processing Process weight data with minimal latency. C-03 Secure API Access Ensure authentication and authorization for API access. C-04 Mobile User Interface Provide an intuitive mobile interface for waste pickers. C-05 Multi-Center Support Allow multiple cooperative centers to use the system. C-06 Environmental Resilience Ensure scale durability in dust, moisture, and impact conditions. C-07 Data Storage &amp; Retrieval Store and retrieve weight data efficiently. C-08 Compliance with Guidelines Follow best practices from the implementation guide. <p>(Additional capabilities \u2026)</p>"},{"location":"project/product/product-backlog-building/#6-features","title":"6. Features","text":"<p>Features define the specific functionalities required to implement each capability.</p> # Feature Description F-01 Scale Data Transmission Transmit weight data from the scale to the API. F-02 Mobile Weight Display Display real-time weight data on the mobile app. F-03 User Authentication Secure login system for API and app users. F-04 Offline Mode Enable mobile app functionality without an internet connection. F-05 Multi-Center Management Manage users and operations across multiple cooperative centers. F-06 API Logging &amp; Monitoring Track API requests and performance metrics. F-07 Data Export Allow users to export collected data in CSV or JSON formats. F-08 UI Accessibility Enhancements Ensure the app is accessible for users with low digital literacy. <p>(Additional features \u2026)</p>"},{"location":"project/product/product-backlog-building/#7-user-stories","title":"7. User Stories","text":"<p>User stories describe how different users interact with the system, providing real-world scenarios.</p> # Description US-01 As a scale operator, I want the equipment to perform precise measurements to avoid weighing errors. US-02 As a scale operator, I want the equipment to have a digital display to view the weight before confirmation. US-03 As an administrator, I want the scale to be resistant to adverse environmental conditions (dust, moisture, impact) for greater durability. US-04 As a scale operator, I want the system to notify me if the scale is uncalibrated to ensure accuracy. US-05 As an administrator, I want to configure different weighing modes in the system to meet operational needs. <p>(Additional user stories \u2026)</p>"},{"location":"project/product/product-backlog-building/#8-backlog","title":"8. Backlog","text":"<p>The project backlog is a comprehensive list of all tasks, features, and improvements planned for the application. It serves as a central reference for what needs to be developed, allowing the development team to have a clear view of the project scope. Additionally, it functions as a list of features that will be prioritized and selected for the MVP scope.</p> Theme Epic Capabilities Features User Story Description TM01 EP01 Content and User Management C01 User Management F01 Registration of Doctors and Admins US01 As a doctor, I would like to register in the system to have access credentials TM01 EP01 Content and User Management C01 User Management F05 Login for Doctors and Admins US02 As a doctor, I would like to log into the system to access the platform's content TM01 EP01 Content and User Management C01 User Management F05 Login for Doctors and Admins US03 As an administrator, I would like to log into the system to access management features TM01 EP01 Content and User Management C01 User Management F04 User Profile Editing US04 As a user (doctor or administrator), I would like to reset my password to recover access credentials TM01 EP01 Content and User Management C01 User Management F04 User Profile Editing US05 As a user (doctor or administrator), I would like to edit my profile to update registered information TM01 EP02 Subscription and Notifications C04 Finance Management F12 Subscription Management US06 As a doctor, I would like to access the finance area to manage my subscription TM01 EP01 Content and User Management C01 User Management F01 Registration of Doctors and Admins US07 As an administrator, I would like to create other admin accounts to assist in management TM01 EP01 Content and User Management C01 User Management F02 User Search and Listing US08 As an administrator, I would like to list users to view registered users TM01 EP01 Content and User Management C01 User Management F03 User Editing and Deletion US09 As an administrator, I would like to edit a user to correct any registration errors TM01 EP01 Content and User Management C01 User Management F03 User Editing and Deletion US10 As an administrator, I would like to delete a user to remove any improper registrations TM01 EP01 Content and User Management C01 User Management F02 User Search and Listing US11 As an administrator, I would like to search for a specific user to find them more easily TM01 EP01 Content and User Management C02 Content Management F06 Document Creation and Listing US12 As an administrator, I would like to create a document to add new material TM01 EP01 Content and User Management C02 Content Management F06 Document Creation and Listing US13 As an administrator, I would like to list documents to view registered materials TM01 EP01 Content and User Management C02 Content Management F07 Document Editing and Deletion US14 As an administrator, I would like to edit a document to update material TM01 EP01 Content and User Management C02 Content Management F07 Document Editing and Deletion US15 As an administrator, I would like to delete a document to remove outdated material TM01 EP01 Content and User Management C02 Content Management F06 Document Creation and Listing US16 As an administrator, I would like to create a topic to complement an already registered document TM01 EP01 Content and User Management C02 Content Management F06 Document Creation and Listing US17 As an administrator, I would like to list topics to view registered topics within a document TM01 EP01 Content and User Management C02 Content Management F07 Document Editing and Deletion US18 As an administrator, I would like to edit a topic to update the material"},{"location":"project/product/product-backlog-building/#revision-history","title":"Revision History","text":"Date Version Changes Authors 2025-03-28 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to Main Page</p>"},{"location":"project/vision-objectives/objectives/","title":"Project Objectives","text":""},{"location":"project/vision-objectives/objectives/#1-overview","title":"1. Overview","text":"<p>\u2190 Back to the Main Page</p> <p>The primary objective of this project is to develop a real-time monitoring system capable of detecting anomalies and potential failures in large-scale server infrastructures. The system will use machine learning algorithms to identify unusual patterns in server performance metrics, which may indicate potential failures or security threats. By implementing this system, we aim to enhance the reliability and availability of enterprise IT systems and reduce the time to detect and respond to issues.</p>"},{"location":"project/vision-objectives/objectives/#2-general-objectives","title":"2. General Objectives","text":"<p>The project seeks to achieve the following general goals:</p> Objective Description Scalable monitoring platform Develop a platform capable of tracking real-time server performance metrics (e.g., CPU usage, memory usage, network traffic). Machine learning models Implement models to analyze historical and real-time data to predict hardware failures and detect performance anomalies. Seamless integration Ensure integration with existing IT infrastructure and monitoring tools likeNagios , Zabbix , and Prometheus . Robust alerting system Create a system to notify system administrators of detected anomalies or potential failures. Dashboard interface Provide a user interface for visualizing the real-time status of servers and system components."},{"location":"project/vision-objectives/objectives/#3-specific-objectives","title":"3. Specific Objectives","text":"<p>To meet the general objectives, the project will focus on the following specific tasks:</p>"},{"location":"project/vision-objectives/objectives/#research-algorithm-development","title":"Research &amp; Algorithm Development","text":"Task Description Literature review Conduct a review of anomaly detection techniques, focusing on time-series data analysis and unsupervised learning algorithms (e.g., k-means clustering, autoencoders). Data preprocessing Implement pipelines to clean and normalize raw server performance data (e.g., handling missing values, outliers, and normalization). Machine learning model training Train models to detect performance anomalies by analyzing server metrics in real time, evaluated based on precision, recall, and F1-score."},{"location":"project/vision-objectives/objectives/#system-design-integration","title":"System Design &amp; Integration","text":"Task Description Architecture design Design the platform using a microservices architecture, with services for data collection, anomaly detection, and alert management. API layer implementation Implement an API layer to integrate with external monitoring tools and support data retrieval and alerts. Logging system Develop a centralized logging system to collect and analyze logs from multiple servers for further anomaly detection."},{"location":"project/vision-objectives/objectives/#alerting-visualization","title":"Alerting &amp; Visualization","text":"Task Description Real-time alert system Design and implement a system using WebSocket and Push Notifications to notify administrators of detected anomalies. Dashboard interface Create an interactive dashboard using React and D3.js to visualize server health, metrics trends, and real-time alerts. Alert customization Enable administrators to customize alert thresholds and notification preferences via the user interface."},{"location":"project/vision-objectives/objectives/#4-expected-outcomes","title":"4. Expected Outcomes","text":"<p>By the end of the project, we expect the following deliverables and outcomes:</p> Deliverable Description Monitoring platform A fully functional platform capable of tracking multiple servers in real time and providing actionable insights into server performance and health. Machine learning models Models that predict server failures or performance degradation with at least 85% accuracy. Dashboard interface An interface providing clear visualizations of server health and performance metrics, enabling quick, informed decisions. Alerting system A robust alerting system integrated with email, SMS, and Slack, ensuring prompt responses to critical incidents. API documentation Comprehensive documentation for external integrations and scalability."},{"location":"project/vision-objectives/objectives/#5-long-term-objectives","title":"5. Long-Term Objectives","text":"<p>In the long term, the project aims to:</p> Objective Description Expand capabilities Extend the platform to monitor additional infrastructure components (e.g., databases, network devices, virtual machines). Advanced analytics Integrate trend forecasting and capacity planning for proactive infrastructure management. Cross-platform deployment Support deployments across on-premises, cloud-based, and hybrid environments."},{"location":"project/vision-objectives/objectives/#technical-focus","title":"Technical Focus","text":"<p>The system will leverage a combination of cutting-edge technologies:</p> Component Technologies Backend Python (Flask/FastAPI), Docker, Kubernetes, Celery Machine Learning Scikit-learn, TensorFlow Frontend React.js, D3.js Database PostgreSQL, MongoDB"},{"location":"project/vision-objectives/objectives/#success-criteria","title":"Success Criteria","text":"Criteria Description Anomaly detection Real-time anomaly detection with a false positive rate of less than 5%. Scalability Ability to handle up to 1,000 servers in a distributed environment. Alert system A highly responsive alerting system with less than 1-minute delay from anomaly detection to alert generation. <p>\u2190 Back to the Main Page</p>"},{"location":"project/vision-objectives/vision/","title":"Project Vision","text":"<p>\u2190 Back to the Main Page</p>"},{"location":"project/vision-objectives/vision/#vision-statement","title":"Vision Statement","text":"<p>Our vision is to redefine the way people engage with education in the digital age. We aim to create an intelligent, scalable, and accessible platform that empowers learners worldwide to acquire new skills, deepen their knowledge, and transform their careers, no matter where they are.</p> <p>By integrating personalized learning paths, cutting-edge AI recommendations, and a community-driven environment, our platform will provide students with an immersive and adaptive educational experience. We envision a space where learning is not limited by geography, traditional schedules, or rigid curricula, but instead is flexible, dynamic, and driven by the learner\u2019s needs and interests.</p> <p>Our platform will cater to individuals, organizations, and educational institutions, offering tools to track progress, measure success, and unlock opportunities for career advancement. Through collaboration with leading educators and content creators, we will ensure high-quality learning experiences that are up-to-date and relevant to the rapidly evolving job market.</p> <p>In the long run, we aim to be the global leader in online education, creating a future where education is personalized, accessible to all, and an ongoing part of people\u2019s lifelong journey toward self-improvement and success.</p> <p>Our platform will not only shape the future of education but also democratize learning, breaking down barriers and unlocking opportunities for millions of people around the world.</p>"},{"location":"project/vision-objectives/vision/#key-elements","title":"Key Elements","text":"Element Description Accessibility The platform will ensure education is accessible to anyone, anywhere. Personalization AI-driven learning paths tailored to each individual's needs. Innovation Cutting-edge technology for adaptive learning experiences. Global Impact Democratizing education to provide opportunities for all. Collaboration Partnering with educators, content creators, and industry leaders to provide the best resources."},{"location":"project/vision-objectives/vision/#long-term-goals","title":"Long-term Goals","text":"Goal Description Become a global leader in online education Transform the way education is delivered worldwide. Improve learning outcomes Deliver personalized learning experiences that lead to real-world success. Support lifelong learning Provide ongoing opportunities for growth and career advancement. Foster inclusion Break down barriers to education and empower all learners."},{"location":"project/vision-objectives/vision/#revision-history","title":"Revision History","text":"Date Version Changes Authors 2025-03-28 0.1 Document creation Cain\u00e3 Freitas and Lucas Antunes <p>\u2190 Back to the Main Page</p>"},{"location":"setup/mkdocs-configuration/","title":"MkDocs Configuration Guide","text":""},{"location":"setup/mkdocs-configuration/#basic-configuration","title":"Basic Configuration","text":"<p>The <code>mkdocs.yml</code> file is the configuration file for your MkDocs project. Here's an example configuration:</p> <pre><code>   site_name: Meu Projeto Docs\n   nav:\n     - Home: index.md\n     - About: about.md\n   theme: readthedocs\n</code></pre> <ul> <li><code>site_name</code> : The name of your documentation site.</li> <li><code>nav</code> : Defines the navigation menu. Each item links to a Markdown file.</li> <li><code>theme</code> : Specifies the theme to use. Popular themes include <code>readthedocs</code> and <code>material</code>.</li> </ul>"},{"location":"setup/mkdocs-configuration/#2-customizing-the-theme","title":"2. Customizing the Theme","text":"<p>To use the <code>mkdocs-material</code> theme, install it first:</p> <p>bash</p> <pre><code>   pip install mkdocs-material\n</code></pre> <p>Then, update the <code>mkdocs.yml</code> file:</p> <p>yaml</p> <pre><code>   theme:\n     name: material\n</code></pre> <p>The <code>material</code> theme offers many customization options, such as changing colors, fonts, and adding a logo. For example:</p> <p>yaml</p> <pre><code>   theme:\n     name: material\n     palette:\n       primary: indigo\n       accent: teal\n     logo: assets/logo.jpg\n</code></pre>"},{"location":"setup/mkdocs-configuration/#3-adding-plugins","title":"3. Adding Plugins","text":"<p>MkDocs supports plugins for additional functionality. For example, to add a search plugin:</p> <p>yaml</p> <pre><code>   plugins:\n     - search\n</code></pre> <p>Other popular plugins include:</p> <ul> <li><code>mkdocs-minify-plugin</code> : Minifies HTML, CSS, and JS files.</li> <li><code>mkdocs-git-revision-date-plugin</code> : Adds the last updated date to your pages.</li> </ul> <p>To install a plugin, use <code>pip</code>. For example:</p> <p>bash</p> <pre><code>   pip install mkdocs-minify-plugin\n</code></pre> <p>Then, add it to the <code>mkdocs.yml</code> file:</p> <p>yaml</p> <pre><code>   plugins:\n     - search\n     - minify\n</code></pre>"},{"location":"setup/mkdocs-configuration/#4-versioning-documentation","title":"4. Versioning Documentation","text":"<p>Use the <code>mike</code> plugin to version your documentation:</p> <ol> <li>Install <code>mike</code>:</li> </ol> <p>bash</p> <pre><code>   pip install mike\n</code></pre> <ol> <li>Deploy a version:</li> </ol> <p>bash</p> <pre><code>   mike deploy 1.0\n</code></pre> <ol> <li>Access the versioned documentation at:</li> </ol> <pre><code>   https://&lt;your-username&gt;.github.io/&lt;your-repo&gt;/1.0/\n</code></pre> <p>To deploy multiple versions, repeat the process:</p> <p>bash</p> <pre><code>   mike deploy 2.0\n</code></pre> <p>You can also set a default version:</p> <p>bash</p> <pre><code>   mike set-default 1.0\n</code></pre>"},{"location":"setup/mkdocs-configuration/#5-customizing-the-navigation","title":"5. Customizing the Navigation","text":"<p>The <code>nav</code> section in <code>mkdocs.yml</code> controls the structure of your documentation. For example:</p> <p>yaml</p> <pre><code>   nav:\n     - Home: index.md\n     - Getting Started:\n       - Installation: getting-started/installation.md\n       - Configuration: getting-started/configuration.md\n     - Advanced Topics:\n       - Plugins: advanced/plugins.md\n       - Theming: advanced/theming.md\n</code></pre> <p>This creates a nested navigation menu with sections and subpages.</p>"},{"location":"setup/mkdocs-configuration/#6-adding-extras","title":"6. Adding Extras","text":"<ul> <li>Favicon: Add a favicon to your site by placing a <code>favicon.ico</code> file in the <code>docs/</code> folder and referencing it in <code>mkdocs.yml</code>:</li> </ul> <p>yaml</p> <pre><code>   extra:\n     favicon: assets/favicon.ico\n</code></pre> <ul> <li>Analytics: Add Google Analytics by including your tracking ID:</li> </ul> <p>yaml</p> <pre><code>   extra:\n     analytics:\n       provider: google\n       property: UA-XXXXX-Y\n</code></pre>"},{"location":"setup/mkdocs-setup/","title":"MkDocs Setup Guide","text":""},{"location":"setup/mkdocs-setup/#what-is-mkdocs","title":"What is MkDocs?","text":"<p>MkDocs is a static site generator designed for project documentation. It uses Markdown for content and YAML for configuration. It's simple, fast, and perfect for creating beautiful documentation.</p>"},{"location":"setup/mkdocs-setup/#1-install-mkdocs","title":"1. Install MkDocs","text":"<p>Make sure you have Python installed and a virtual environment set up (see the Python Virtual Environment Setup Guide). Then, install MkDocs using <code>pip</code>:</p> <pre><code>   pip install mkdocs\n</code></pre>"},{"location":"setup/mkdocs-setup/#2-create-a-new-project","title":"2. Create a New Project","text":"<p>To create a new MkDocs project, run the following command:</p> <p>bash</p> <pre><code>   mkdocs new meu-projeto-docs\n</code></pre> <p>This will create a folder named <code>meu-projeto-docs</code> with the following structure:</p> <p>meu-projeto-docs/</p> <ul> <li><code>docs/</code> : This folder contains the Markdown files for your documentation.</li> <li><code>mkdocs.yml</code> : This is the configuration file for your MkDocs project.</li> </ul>"},{"location":"setup/mkdocs-setup/#3-add-content","title":"3. Add Content","text":"<p>Add Markdown files to the <code>docs/</code> folder to create your documentation. For example:</p>"},{"location":"setup/mkdocs-setup/#docsindexmd","title":"<code>docs/index.md</code>","text":"<p>markdown</p> <pre><code>   # Welcome to My Project Docs\n\n   This is the homepage of the project documentation.\n</code></pre>"},{"location":"setup/mkdocs-setup/#docsaboutmd","title":"<code>docs/about.md</code>","text":"<p>markdown</p> <p># About the Project</p>"},{"location":"setup/mkdocs-setup/#4-edit-the-configuration-file","title":"4. Edit the Configuration File","text":"<p>Open the <code>mkdocs.yml</code> file and customize it. Here's an example configuration:</p> <p>yaml</p> <p>site_name: Meu Projeto Docs</p> <ul> <li><code>site_name</code> : The name of your documentation site.</li> <li><code>nav</code> : Defines the navigation menu. Each item links to a Markdown file.</li> <li><code>theme</code> : Specifies the theme to use. Popular themes include <code>readthedocs</code> and <code>material</code>.</li> </ul>"},{"location":"setup/mkdocs-setup/#5-preview-locally","title":"5. Preview Locally","text":"<p>To preview your documentation locally, run:</p> <p>bash</p> <p>mkdocs serve</p> <p>This will start a local development server. Access the documentation in your browser at:</p> <p>http://127.0.0.1:8000</p> <p>Any changes you make to the Markdown files or configuration will be automatically reflected in the browser.</p>"},{"location":"setup/mkdocs-setup/#6-build-the-site","title":"6. Build the Site","text":"<p>When you're ready to generate the static site, run:</p> <p>bash</p> <p>mkdocs build</p> <p>This will create a <code>site/</code> folder containing the HTML, CSS, and JavaScript files for your documentation.</p>"},{"location":"setup/publishing-guide/","title":"Publishing Documentation to GitHub Pages","text":""},{"location":"setup/publishing-guide/#steps-to-publish","title":"Steps to Publish","text":""},{"location":"setup/publishing-guide/#1-install-the-gh-deploy-plugin","title":"1. Install the <code>gh-deploy</code> Plugin","text":"<p>The <code>gh-deploy</code> command is included by default with MkDocs. Ensure MkDocs is installed and your virtual environment is activated.</p> <p>If you haven't installed MkDocs yet, run:</p> <pre><code>   pip install mkdocs\n</code></pre>"},{"location":"setup/publishing-guide/#2-deploy-to-github-pages","title":"2. Deploy to GitHub Pages","text":"<p>To publish your documentation, run the following command:</p> <p>bash</p> <pre><code>   mkdocs gh-deploy\n</code></pre> <p>This will:</p> <ul> <li>Build the site.</li> <li>Push the contents of the <code>site/</code> folder to the <code>gh-pages</code> branch of your repository.</li> </ul>"},{"location":"setup/publishing-guide/#3-access-your-documentation","title":"3. Access Your Documentation","text":"<p>Your documentation will be available at:</p> <pre><code>   https://&lt;your-username&gt;.github.io/&lt;your-repo&gt;/\n</code></pre> <p>Replace <code>&lt;your-username&gt;</code> with your GitHub username and <code>&lt;your-repo&gt;</code> with the name of your repository.</p>"},{"location":"setup/publishing-guide/#4-automating-deployment-with-github-actions","title":"4. Automating Deployment with GitHub Actions","text":"<p>To automate the deployment process, create a GitHub Actions workflow:</p> <ol> <li>Create a <code>.github/workflows/</code> directory in your repository:</li> </ol> <p>bash</p> <pre><code>   mkdir -p .github/workflows/\n</code></pre> <ol> <li>Create a file named <code>deploy.yml</code> in the <code>.github/workflows/</code> directory:</li> </ol> <p>yaml</p> <pre><code>   name: Deploy Docs\n   on:\n     push:\n       branches:\n         - main\n   jobs:\n     deploy:\n       runs-on: ubuntu-latest\n       steps:\n         - uses: actions/checkout@v2\n         - name: Set up Python\n           uses: actions/setup-python@v2\n           with:\n             python-version: 3.x\n         - name: Install dependencies\n           run: pip install mkdocs mkdocs-material\n         - name: Deploy to GitHub Pages\n           run: mkdocs gh-deploy --force\n</code></pre> <p>This workflow will automatically build and deploy your documentation whenever you push changes to the <code>main</code> branch.</p>"},{"location":"setup/publishing-guide/#5-custom-domain-optional","title":"5. Custom Domain (Optional)","text":"<p>If you want to use a custom domain for your documentation:</p> <ol> <li>Create a file named <code>CNAME</code> in the <code>docs/</code> folder with your custom domain:</li> </ol> <pre><code>   docs.example.com\n</code></pre> <ol> <li>Add the <code>CNAME</code> file to your <code>mkdocs.yml</code>:</li> </ol> <p>yaml</p> <pre><code>   extra:\n     CNAME: docs.example.com\n</code></pre> <ol> <li>Configure your DNS settings to point to GitHub Pages. Follow the GitHub Pages guide for detailed instructions.</li> </ol>"},{"location":"setup/python-venv-setup/","title":"Python Virtual Environment Setup","text":""},{"location":"setup/python-venv-setup/#why-use-a-virtual-environment","title":"Why Use a Virtual Environment?","text":"<p>A virtual environment allows you to manage dependencies for your project in an isolated environment, avoiding conflicts with other projects. It ensures that the packages you install are specific to the project and do not interfere with your global Python installation.</p>"},{"location":"setup/python-venv-setup/#steps-to-set-up-a-virtual-environment","title":"Steps to Set Up a Virtual Environment","text":""},{"location":"setup/python-venv-setup/#1-install-python","title":"1. Install Python","text":"<p>Make sure Python is installed on your system. You can download it from the official website: python.org.</p> <p>To check if Python is already installed, run:</p> <pre><code>   python --version\n</code></pre>"},{"location":"setup/python-venv-setup/#2-activate-the-virtual-environment","title":"2. Activate the Virtual Environment","text":"<p>To start using the virtual environment, you need to activate it.</p> <ul> <li>On Windows:</li> </ul> <p><code>bash   venv\\Scripts\\activate</code> - On macOS/Linux:</p> <p><code>bash   source venv/Scripts/activate</code></p> <p>Once activated, your terminal prompt will change to show the name of the virtual environment (e.g., <code>(venv)</code>).</p>"},{"location":"setup/python-venv-setup/#3-install-dependencies","title":"3. Install Dependencies","text":"<p>With the virtual environment activated, you can install the required packages using <code>pip</code>. For example, to install MkDocs:</p> <pre><code>   pip install mkdocs\n</code></pre> <p>You can also install multiple packages at once by listing them:</p> <pre><code>   pip install mkdocs mkdocs-material\n</code></pre>"},{"location":"setup/python-venv-setup/#4-deactivate-the-virtual-environment","title":"4. Deactivate the Virtual Environment","text":"<p>When you're done working in the virtual environment, you can deactivate it by running:</p> <pre><code>   deactivate\n</code></pre> <p>This will return you to the global Python environment.</p>"},{"location":"setup/readme/","title":"Documentation Setup Guide","text":"<p>Welcome to the <code>docs-setup</code> folder! This folder contains all the necessary guides to set up and configure your project documentation using MkDocs.</p>"},{"location":"setup/readme/#guides","title":"Guides","text":""},{"location":"setup/readme/#1-python-virtual-environment-setup","title":"1. Python Virtual Environment Setup","text":"<p>Learn how to set up a Python virtual environment for dependency management.</p> <ul> <li>View Guide</li> </ul>"},{"location":"setup/readme/#2-mkdocs-setup","title":"2. MkDocs Setup","text":"<p>Step-by-step instructions to install and configure MkDocs.</p> <ul> <li>View Guide</li> </ul>"},{"location":"setup/readme/#3-mkdocs-configuration","title":"3. MkDocs Configuration","text":"<p>Customize your MkDocs project with themes, plugins, and versioning.</p> <ul> <li>View Guide</li> </ul>"},{"location":"setup/readme/#4-publishing-guide","title":"4. Publishing Guide","text":"<p>Publish your documentation to GitHub Pages and automate the process with GitHub Actions.</p> <ul> <li>View Guide</li> </ul>"},{"location":"setup/readme/#quick-start","title":"Quick Start","text":"<ol> <li>Set up a Python virtual environment:</li> </ol> <pre><code>   python -m venv venv\n</code></pre> <ol> <li>Activate the virtual environment:</li> <li>On Windows:</li> </ol> <p>bash</p> <pre><code>   venv\\Scripts\\activate\n</code></pre> <ul> <li>On macOS/Linux:</li> </ul> <p>bash</p> <pre><code>   source venv/bin/activate\n</code></pre> <ol> <li>Install MkDocs:</li> </ol> <p>bash</p> <pre><code>   pip install mkdocs\n</code></pre> <ol> <li>Create a new MkDocs project:</li> </ol> <p>bash</p> <pre><code>   mkdocs new meu-projeto-docs\n</code></pre> <ol> <li>Preview your documentation locally:</li> </ol> <p>bash</p> <pre><code>   mkdocs serve\n</code></pre> <ol> <li>Publish your documentation to GitHub Pages:</li> </ol> <p>bash</p> <pre><code>   mkdocs gh-deploy\n</code></pre>"},{"location":"setup/readme/#license","title":"License","text":"<p>This project is licensed under the  GNU General Public License v3.0 (GPL-3.0) . For more details, see the LICENSE file.</p>"},{"location":"setup/readme/#contributing","title":"Contributing","text":"<p>If you would like to contribute to this project, please read the contribution guide for more details.</p>"},{"location":"setup/readme/#support","title":"Support","text":"<p>For questions or issues, please open an issue in the GitHub repository.</p>"}]}